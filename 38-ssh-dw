#!/bin/bash

# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------

export NOMECONTAINER="ssh-dw"
export docker_repo="urbancompasspony/ssh-dw:latest"
export base_img="dwservice"
export set_folders="data"

#exe   ="1234567890123:"
CustmN2="Local IP      "
CustmN3="."
CustmN4="."
CustmN5="."
CustmN6="."
CustmN7="."
CustmN8="."
CustmN9="."
CustmN10="."

VALUE2="HOSTONLY"
VALUE3="0"
VALUE4="0"
VALUE5="0"
VALUE6="0"
VALUE7="0"
VALUE8="0"
VALUE9="0"
VALUE10="0"

function docker_create {
if [[ "$CustmN2" =~ ^(LOCALONLY|HOSTONLY|ONLYLOCAL|ONLYHOST|localonly|hostonly|onlylocal|onlyhost|host|Host|HOST|local|Local|LOCAL|hostname|Hostname|HostName|HOSTNAME|localhost|Localhost|LocalHost|LOCALHOST|)$ ]]; then

docker run -d --privileged --name="$NOMECONTAINER" --hostname="$NOMECONTAINER" \
--network host --add-host=host.docker.internal:host-gateway \
--no-healthcheck --restart=unless-stopped -v /etc/localtime:/etc/localtime:ro \
-v /srv/containers/"$NOMECONTAINER"/data:/usr/share \
"$docker_repo"

else

docker run -d --name="$NOMECONTAINER" --hostname="$NOMECONTAINER" \
--network macvlan --ip="$CustmN2" --dns="$CustmN3" \
--no-healthcheck --restart=unless-stopped -v /etc/localtime:/etc/localtime:ro \
-v "/srv/containers/$NOMECONTAINER/config:/config" \
-v "/srv/containers/$NOMECONTAINER/data:/data" \
"$docker_repo"

fi

#--privileged
#--network host --add-host=host.docker.internal:host-gateway \
}

# USE IT ONLY IF NEEDED:
function docker_extras {
#docker exec "$NOMECONTAINER" bash -c "echo 'parameter=0' >> /etc/custom.conf"
#docker restart "$NOMECONTAINER"

# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
echo "0" > /dev/null
}

masterfile="/srv/system.yaml"
configfile="/srv/containers.yaml"

#exe   ="1234567890123:"
CustmN1="Nome Container"

labels=("$CustmN1" "$CustmN2" "$CustmN3" "$CustmN4" "$CustmN5" "$CustmN6" "$CustmN7" "$CustmN8" "$CustmN9" "$CustmN10")

VALUE1="$NOMECONTAINER"
values=("$VALUE1" "$VALUE2" "$VALUE3" "$VALUE4" "$VALUE5" "$VALUE6" "$VALUE7" "$VALUE8" "$VALUE9" "$VALUE10")

function check_root {
  [ "$EUID" -ne 0 ] && {
    clear; echo "Execute esse script como Root! Saindo..."
    exit 1
  }
}

function check_macvlan {
  if ! docker inspect macvlan 1>/dev/null 2>/dev/null; then
    clear; echo "A macvlan nÃ£o existe! Saindo..."; sleep 3
    exit 0
  fi
}

function try_pull {
  if ! docker pull "$docker_repo"; then
    clear; echo "Erro: docker pull falhou... saindo."; sleep 3
    exit 1
  fi
}

function lockfile0 {
  if [ -f /srv/lockfile ]; then
    load_config_check
    try_pull
    docker_create
    docker_extras
    save_config
  else
    main_menu
  fi
}

function load_config_check {
  if ! [ -f "$configfile" ]; then
    clear; echo ""; echo "ERRO CRITICO: NAO ENCONTREI O $configfile! Saindo."
    exit 1
  elif grep -qw "$base_img" "$configfile"; then
    load_data
  else
    clear; echo ""; echo "ERRO: NAO ENCONTREI DADOS SUFICIENTES EM $configfile! Saindo."
    exit 1
  fi
}

function load_data {
  if ! [ -f "$configfile" ]; then
    return
  fi

  for i in "${!values[@]}"; do
    eval "VALUE$((i+1))=\"\$(yq -r \".${values[$i]}\" \"$configfile\")\""
  done

  if [ "$VALUE1" = "null" ]; then
    return
  else
    NOMECONTAINER="$VALUE1"
  fi
}

function save_config {
  sudo touch "$configfile"

  custom_names=("$CustmN1" "$CustmN2" "$CustmN3" "$CustmN4" "$CustmN5" "$CustmN6" "$CustmN7" "$CustmN8" "$CustmN9" "$CustmN10")
  values=("$VALUE1" "$VALUE2" "$VALUE3" "$VALUE4" "$VALUE5" "$VALUE6" "$VALUE7" "$VALUE8" "$VALUE9" "$VALUE10")

  datetime0=$(date +"%d/%m/%Y - %H:%M")
  sudo yq -i ".${NOMECONTAINER}.install = \"${datetime0}\"" "$configfile"
  sudo yq -i ".${NOMECONTAINER}.baseimg = \"${base_img}\"" "$configfile"

  for i in "${!custom_names[@]}"; do
    sudo yq -i ".${NOMECONTAINER}.${custom_names[$i]} = \"${values[$i]}\"" "$configfile"
  done
}

function main_menu {
  load_data

  form_args=()
  for idx in "${!labels[@]}"; do
    line=$((idx+1))
    form_args+=("${labels[$idx]}:" "$line" 1 "${values[$idx]}" "$line" 17 150 0)
  done

  if ! form=$(dialog --ok-label "Criar" --title "Novo Container" --form "Nome Sugerido / Padrao: $NOMECONTAINER" 17 80 0 \
  "${form_args[@]}" 3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    return
  fi

  mapfile -t VALUES <<< "$form"

  for i in {1..10}; do
    declare "VALUE$i=${VALUES[$((i-1))]}"
  done

  NOMECONTAINER="$CustmN1"

  save_config
  check_IP
}

function check_IP {
  if grep -qw "$VALUE2" "$masterfile"; then
    dialog --title "ERRO" --msgbox "Conflito de IP detectado no $masterfile:\nMesmo IP do Host!" 6 40
    main_menu
  elif grep -qw "$VALUE2" "$configfile"; then
    dialog --title "ERRO" --msgbox "Conflito de IP detectado no $configfile:\nMesmo IP de outro container!" 6 40
    main_menu
  else
    mkdir0
    try_pull
    docker_create
    docker_extras
    cleanup0
  fi
}

function mkdir0 {
  if [ -d "/srv/containers/$NOMECONTAINER" ]; then
    dialog --title "WARNING" --msgbox "Foram identificados dados previamente configurados! \n\nParando e removendo container caso esteja rodando. \n\nSe precisar, apague o conteudo de /srv/$NOMECONTAINER manualmente" 12 50
    if docker stop "$NOMECONTAINER"; then
      docker rm "$NOMECONTAINER"
      clear; echo "O container $NOMECONTAINER estava executando, foi parado e removido. Continuando..."; sleep 1
    elif docker rm "$NOMECONTAINER"; then
      clear; echo "O container $NOMECONTAINER nao estava executando e foi removido. Continuando..."; sleep 1
    else
      clear; echo "O container $NOMECONTAINER nao existia, nao estava executando e/ou nao foi identificado. Continuando..."; sleep 1
    fi
  else
    mkdir -p /srv/containers/"$NOMECONTAINER"/"$set_folders"
  fi
}

function cleanup0 {
  for i in {1..10}; do
    unset "VALUE$i"
  done

  docker image prune -af

  for i in {1..10}; do
    unset "CustmN$i"
  done
}

check_root
check_macvlan
lockfile0

exit 0
