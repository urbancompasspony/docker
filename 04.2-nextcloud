#!/bin/bash

# DOES NOT PUT ANY PORTS ON -p FLAG FOR THIS CONTAINER!
# IF YOU DO SO, WILL CONFLICT WITH MYSQL CONTAINER THROUGH BRIDGE NETWORK.

# Change /data permissions set as root user: sudo -i
# chown www-data:www-data
# find /mnt/temp/data -type f -print0 | xargs -0 chmod 0640
# find /mnt/temp/data -type d -print0 | xargs -0 chmod 0750

# Global config for replication:
export NOMECONTAINER="nextcloud"

# IP FIXO DO NOVO CONTAINER
export var1; export var2

function checkA {
  [ "$EUID" -ne 0 ] && {
    echo "Execute esse script como Root!"
    exit
    }
}

function checkB {
  export var1; export var2

  [ -f "/srv/containers/$NOMECONTAINER/Information" ] && {
    dialog --title "Dados de $NOMECONTAINER encontrados!" --yesno "Deseja refazer o container?" 6 40
    [ $? = 0 ] && {
    dialog --title "Recriando o container $NOMECONTAINER" --yesno "Deseja reaproveitar os DADOS da instalação anterior?" 6 40
      [ $? = 0 ] && {
        var1=$(sed -n '1p' /srv/containers/$NOMECONTAINER/Information)
        var2=$(sed -n '2p' /srv/containers/$NOMECONTAINER/Information)

        [ $(docker stop "$NOMECONTAINER") ] && {
          docker rm "$NOMECONTAINER"
          create
        } || {
          create
        }

      } || {
        docker stop "$NOMECONTAINER"
        docker rm "$NOMECONTAINER"

        datetime=$(date +"%d-%m %H-%M")
        mkdir -p /srv/containers/.backupcnt
        zip "/srv/containers/.backupcnt/$NOMECONTAINER-$datetime.zip" -r /srv/containers/$NOMECONTAINER

        rm -R /srv/containers/"$NOMECONTAINER"

        menu
        }
    } || {
      echo "A instalação local será mantida! Saindo..."
      exit
    }
  } || {
    menu
    }
}

function menu {
  export var1; export var2

  VALUE1=""; VALUE2="/srv/containers/$NOMECONTAINER"

  VALUE0=$(dialog --ok-label "Criar" --title "Container: $NOMECONTAINER" --form "Não apontar diretamente /data! Aponte um diretório acima." 11 40 0 \
"Local IP:" 1 1 "$VALUE1" 1 10 20 0 \
"Nxt Data:" 2 1 "$VALUE2" 2 10 40 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

  [ $? -ne 0 ] && exit
  var1=$(echo "$VALUE0" | sed -n 1p)
  var2=$(echo "$VALUE0" | sed -n 2p)
  
  [ -z "$var1" ] || [ -z "$var2" ] && {
    dialog --title "ERRO" --msgbox "Não deixe nenhum campo vazio!" 8 40
    menu
  } || {
    create
    }
}

function create {
  export var1; export var2

  mkdir -p /srv/containers/"$NOMECONTAINER"
  mkdir -p "$var2"

  touch /srv/containers/"$NOMECONTAINER"/Information
  echo "$var1" > /srv/containers/"$NOMECONTAINER"/Information
  echo "$var2" >> /srv/containers/"$NOMECONTAINER"/Information

docker run -d \
--name=$NOMECONTAINER \
--network macvlan \
--ip=$var1 \
--dns=1.1.1.1  \
--dns=127.0.0.1 \
--hostname=nextcloud \
--restart=unless-stopped \
--no-healthcheck \
-v /etc/localtime:/etc/localtime:ro \
-v /srv/containers/"$NOMECONTAINER"/nextcloud:/var/www/html \
-v /srv/containers/"$NOMECONTAINER"/apps:/var/www/html/custom_apps \
-v /srv/containers/"$NOMECONTAINER"/config:/var/www/html/config \
-v "$var2"/data:/var/www/html/data \
-v /srv/containers/"$NOMECONTAINER"/mysql:/var/lib/mysql \
nextcloud
}

function clean {
  unset var1
  unset var2
}

# Start
checkA
checkB
clean

# Some scripts to run after installation
docker exec nextcloud apt update
docker exec nextcloud apt install smbclient -y
docker restart nextcloud

docker network connect bridge nextcloud

exit
