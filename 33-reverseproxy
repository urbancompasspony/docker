#!/bin/bash

# Global config for replication:
export NOMECONTAINER="reverseproxy"

# IP FIXO DO NOVO CONTAINER
export var1

function checkA {
  [ "$EUID" -ne 0 ] && {
    echo "Execute esse script como Root!"
    exit
    }
}

function checkB {
  export var1

  [ -f "/srv/containers/$NOMECONTAINER/Information" ] && {
    dialog --title "Dados de $NOMECONTAINER encontrados!" --yesno "Deseja refazer o container?" 6 40
    [ $? = 0 ] && {
    dialog --title "Recriando o container $NOMECONTAINER" --yesno "Deseja reaproveitar os DADOS da instalação anterior?" 6 40
      [ $? = 0 ] && {
        var1=$(sed -n '1p' /srv/containers/$NOMECONTAINER/Information)
        
        [ $(docker stop "$NOMECONTAINER") ] && {
          docker rm "$NOMECONTAINER"

          create
        } || {
          create
        }
        
      } || {
        docker stop "$NOMECONTAINER"
        docker rm "$NOMECONTAINER"
        
        datetime=$(date +"%d-%m %H-%M")
        mkdir -p /srv/containers/.backupcnt
        zip "/srv/containers/.backupcnt/$NOMECONTAINER-$datetime.zip" -r /srv/containers/$NOMECONTAINER
        
        rm -iR /srv/containers/"$NOMECONTAINER"

        menu
        }
    } || {
      echo "A instalação local será mantida! Saindo..."
      exit
    }
  } || {
    menu
    }
}

function menu {
  export var1

  [ -f "/srv/containers/$NOMECONTAINER/Information" ] && {
    VALUE1=$(sed -n '1p' /srv/containers/$NOMECONTAINER/Information)
  } || {
    VALUE1=""
  }

  VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 10 40 0 \
"Local IP: " 1 1 "$VALUE1" 1 10 20 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

  [ $? -ne 0 ] && exit
  var1=$(echo "$VALUE0" | sed -n 1p)
  
  [ -z "$var1" ] && {
    dialog --title "ERRO" --msgbox "Não deixe nenhum campo vazio!" 8 40
    menu
  } || {
    checkC
    }
}

function checkC {
  #IPMachine=$(hostname -I | awk '{print $1}')
  MyIP=$(cat /srv/containers/scripts/myip)
  [ "$MyIP" = "$var1" ] && {
    dialog --title "ERRO" --msgbox "Conflito de IP detectado! \nMude para outro IP." 6 40
    menu
  } || {
    create
  }
}

function create {
  export var1
  
  mkdir -p /srv/containers/"$NOMECONTAINER"/apache2/sites-available
  mkdir -p /srv/containers/"$NOMECONTAINER"/apache2/sites-enabled
  mkdir -p /srv/containers/"$NOMECONTAINER"/certbot
  mkdir -p /srv/containers/"$NOMECONTAINER"/cache
  
  touch /srv/containers/"$NOMECONTAINER"/Information
  
  [ -f "/srv/containers/"$NOMECONTAINER"/apache2/apache2.conf" ] && {
    echo "An apache2.conf was found! Skipping download..."
  } || {
    echo "An apache2.conf was not found! Downloading a new one..."
    curl -sSL https://raw.githubusercontent.com/urbancompasspony/docker/main/Custom_Images/reverseproxy/apache2.conf | sudo tee /srv/containers/"$NOMECONTAINER"/apache2/apache2.conf
  }
  
  echo "$var1" > /srv/containers/"$NOMECONTAINER"/Information

docker run -d \
  --name=$NOMECONTAINER \
  --hostname=$NOMECONTAINER \
  --network macvlan \
  --ip=$var1 \
  --dns=1.1.1.1  \
  --dns=127.0.0.1 \
  --no-healthcheck \
  --restart unless-stopped \
  -p 80:80 \
  -p 443:443 \
  -v /etc/localtime:/etc/localtime:ro \
  -v /srv/containers/"$NOMECONTAINER"/apache2/apache2.conf:/etc/apache2/apache2.conf \
  -v /srv/containers/"$NOMECONTAINER"/apache2/sites-available:/etc/apache2/sites-available \
  -v /srv/containers/"$NOMECONTAINER"/apache2/sites-enabled:/etc/apache2/sites-enabled \
  -v /srv/containers/"$NOMECONTAINER"/certbot:/etc/letsencrypt \
  -v /srv/containers/"$NOMECONTAINER"/cache:/var/cache/apache2/mod_cache_disk/routing \
  urbancompasspony/reverseproxy:latest
  }

function clean {
  unset var1
}

# Start
checkA
checkB
clean

# Aways get a new Model.conf file for using on sites-available!
curl -sSL https://raw.githubusercontent.com/urbancompasspony/docker/main/Custom_Images/reverseproxy/model | sudo tee /srv/containers/$NOMECONTAINER/apache2/sites-available/mysite.com.br.conf

docker exec $NOMECONTAINER chown root:www-data -R /var/cache/apache2/mod_cache_disk/routing
docker exec $NOMECONTAINER chmod 775 -R /var/cache/apache2/mod_cache_disk/routing
docker restart $NOMECONTAINER

echo " "
echo "To generate NEW certificates, first edit everything under sites-available then create a link to sites-enabled. So run:"
echo "docker exec $NOMECONTAINER certbot --apache --non-interactive -m myemail@myprovider.com --agree-tos --domain mywebsite.com"
echo "docker exec $NOMECONTAINER certbot install --cert-name myweb-site.com"
echo "If needed, create another SSL for www. too!"
echo " "
echo "Use NANO inside container to set /sites-available/ and inside container create a link to /sites-enabled/:"
echo "docker exec -it $NOMECONTAINER bash"
echo "Restart container to validate, if needed!"
echo " "
echo "Manually Force Renew ALL:"
echo "docker exec -it $NOMECONTAINER certbot --apache renew"
echo "Container has auto renew script, but use this crontab on Host if needed:"
echo "* * 01 * * docker exec $NOMECONTAINER certbot --apache renew"

exit 1
