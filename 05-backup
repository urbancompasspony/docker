#!/bin/bash

# Global config for replication:
export NOMECONTAINER="backup"

# IP FIXO DO NOVO CONTAINER
export var1

[ $(arch) = "x86_64" ] && {
  REPO="urbancompasspony/backup"
} || {
  REPO="urbancompasspony/backup-arm"
}

function checkA {
  [ "$EUID" -ne 0 ] && {
    echo "Execute esse script como Root!"
    exit
    }
}

function checkB {
  export var1

  [ -f "/srv/containers/$NOMECONTAINER/Information" ] && {
    dialog --title "Dados de $NOMECONTAINER encontrados!" --yesno "Deseja refazer o container?" 6 40
    [ $? = 0 ] && {
    dialog --title "Recriando o container $NOMECONTAINER" --yesno "Deseja reaproveitar os DADOS da instalação anterior?" 6 40
      [ $? = 0 ] && {
        var1=$(sed -n '1p' /srv/containers/$NOMECONTAINER/Information)
        
        [ $(docker stop "$NOMECONTAINER") ] && {
          docker rm "$NOMECONTAINER"

          create
        } || {
          create
        }
        
      } || {
        docker stop "$NOMECONTAINER"
        docker rm "$NOMECONTAINER"
        rm -R /srv/containers/"$NOMECONTAINER"

        menu
        }
    } || {
      echo "A instalação local será mantida! Saindo..."
      exit
    }
  } || {
    menu
    }
}

function menu {
  export var1; export var2

  VALUE1=""; VALUE2=""

  VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 10 40 0 \
"Local IP: " 1 1 "$VALUE1" 1 10 20 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

  [ $? -ne 0 ] && exit
  var1=$(echo "$VALUE0" | sed -n 1p)
  
  [ -z "$var1" ] && {
    dialog --title "ERRO" --msgbox "Não deixe nenhum campo vazio!" 8 40
    menu
  } || {
    create
    }
}

function create {
  export var1; export var2
  
  mkdir -p /srv/containers/"$NOMECONTAINER"
  touch /srv/containers/"$NOMECONTAINER"/Information
  echo "$var1" > /srv/containers/"$NOMECONTAINER"/Information

docker run -d \
--name=backup \
--network macvlan \
--ip=$var1 \
--dns=1.1.1.1  \
--dns=127.0.0.1 \
--hostname=backup \
--no-healthcheck \
-v /etc/localtime:/etc/localtime:ro \
-v /srv/containers/"$NOMECONTAINER":/root/.config/rclone \
-v /mnt:/mnt \
-p 80:80 \
-p 443:443 \
--restart=unless-stopped \
$REPO
}

function clean {
  unset var1
}

# Start
checkA
checkB
clean

# Passing parameters!
docker exec -it backup mkdir /root/.config/rclone
docker exec -it backup bash -c "echo '00 12,19 * * * rclone copy --no-traverse /mnt/disk01/folder OneDrive:folder' >> cronjob"
docker exec -it backup crontab /cronjob

exit
