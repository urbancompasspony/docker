#!/bin/bash

function init {
# ============================================================================ #

# SUDO Cron: "@reboot sleep 15; bash /home/ubuntu/Script/Cluster"

# Control Panel #

IP1="172.20.0.10" # Primary Node
HOSTNAME1="cluster-01"

IP2="172.20.0.11" # Secondary Node
HOSTNAME2="cluster-02"

IP3="172.20.0.1" # Local Gateway Server

volumepaths="/srv/containers /mnt/volume01 /mnt/volume02 /mnt/volume03 /mnt/volume04 /mnt/volume5"

lognull="/dev/null"
logpath="/var/log/gluster"

# ============================================================================ #

touch $logpath

while true; do
  data=$(date +".%H.%M.:.%d.%m.%Y.")
  sleep 5;
  gluster00
done
}

# 00 - Check if GlusterFS service is Running
function gluster00 {
  systemctl is-active --quiet glusterd && {
    gluster01
  } || {
    echo "$data Glusterd.service not found. Trying start..." >> $logpath
    systemctl start glusterd.service
    systemctl is-active --quiet glusterd && {
    echo "$data Glusterd started!" >> $logpath
      gluster01
    } || {
      echo "$data ERROR: Glusterd not running!" >> $logpath
      # Higher Beep
      modprobe pcspkr
      env -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER -u SUDO_UID beep -f 2000 -l 200 -r 1
      env -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER -u SUDO_UID beep -f 2000 -l 200 -r 1
    }
  }
}

# 01 - Check if the Volume in /srv/containers is mounted
function gluster01 {
  # Gluster is the only one that creates localhost lines on mtab
  for dir in $(echo $volumepaths)
    do
      aptab=""
      aptab+=$(cat /etc/mtab | grep $dir 1>$lognull 2>$lognull)
      aptab+=" "
    done

    
    cluster00


  } || {
    echo "$data Volume not found. Trying mount..." >> $logpath
    mount -a
    cat /etc/mtab | grep volume 1>$lognull 2>$lognull && {
      echo "$data Volume mounted!" >> $logpath
      cluster00
    } || {
      echo "$data ERROR: Volume not found!" >> $logpath
      # Lower Beep
      modprobe pcspkr
      env -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER -u SUDO_UID beep -f 1000 -l 200 -r 1
      env -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER -u SUDO_UID beep -f 1000 -l 200 -r 1
    }
  }
}

# 02- Ping if there is connection to Gateway route.
function cluster00 {
  if ping -c 1 $IP3 &> $lognull; then
    echo "." >> $lognull
    sleep 1;
    cluster01
  else
    echo "$data ERROR: Gateway not found" >> $logpath
    modprobe pcspkr
    env -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER -u SUDO_UID beep -f 2000 -l 200 -r 1
    env -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER -u SUDO_UID beep -f 1000 -l 200 -r 1
  fi
}

# 03 - Ping the other node.
function cluster01 {
  if ping -c 1 $IP1 &> $lognull && ping -c 1 $IP2 &> $lognull; then
    cluster02
  else
    echo "$data ERROR: The other node does not ping. Starting as MASTER." >> $logpath
    dockerctrl start &&
    setpid "1"
  fi
}

# 04 - Checking for PIDFile on the other node.
function cluster02 {
  [ "$HOSTNAME" = "$HOSTNAME1" ] &&
    checking=$(ssh $HOSTNAME2 "cat ~/.lockha")
    lockha
  } || {
    checking=$(ssh $HOSTNAME1 "cat ~/.lockha")
    lockha
  }
}

function lockha {
  [ "$checking" = "1" ] && {
      dockerctrl stop &&
      echo "0" | tee ~/.lockha
    } || {
      dockerctrl start &&
      echo "1" | tee ~/.lockha
    }
}

function dockerctrl {
  docker "$1" $(docker ps -a -q)
}

function setpid {
  touch ~/.lockha
  echo "$1" | tee ~/.lockha
}

init

exit 1
