#!/bin/bash

# ONLY ON FIRST NODE!
# sudo touch /srv/containers/scripts/cluster
# sudo nano /srv/containers/scripts/cluster
# sudo chmod +x /srv/containers/scripts/cluster
# SUDO cron: "@reboot bash /srv/containers/scripts/cluster"

function init {

################################################################################
# ============================================================================ #

#################
# Control Panel #
#################

# Local Gateway
export IP3="172.20.0.1"

# LAN 01
export IP1="172.20.0.10"
# Reserved NIC 01
export HOSTNAME1="cluster-01"

# LAN 02
export IP2="172.20.0.11"
# Reserved NIC 02
export HOSTNAME2="cluster-02"

# There is no need of ethernet connection!

# ============================================================================ #

# If not setting this, will run as root...
export USERNAME="administrador"

# All logs that are saved or discarded goes here
export logpath="/var/log/gluster"

# Will run 7 times if 0 and 6!
export beeplow="0"
export beephigh="6"
export loglow="0"
export loghigh="6"

# ============================================================================ #
################################################################################

# Source
#source /srv/containers/scripts/cluster

# Preparing Log files
rm -rf $logpath
touch $logpath

# Resetting beep on first run!
export beepsound="0"

# Check if everything if Ok with SSH to connect to another node
eval $(ssh-agent) >/dev/null
ssh-add /home/$USERNAME/.ssh/id_rsa >/dev/null

# This will keep this script running like a daemon!
while true; do
  export data=$(date +"%H:%M %d.%m.%Y")
  sleep 5
  gluster00
done
}

#####################
# High Availability #
#####################

# 00 - Check if GlusterFS service is Running
function gluster00 {
  systemctl is-active --quiet glusterd && {
    gluster01
  } || {
    systemctl start glusterd.service
    systemctl is-active --quiet glusterd && {
    echo "$data Glusterd started manually, it was stopped!" >> $logpath
      export beepsound="0"
      gluster01
    } || {
      echo "$data ERROR: Glusterd not running!" >> $logpath
      echo "$data ERROR: Shutting down all containers!" >> $logpath
      beeps "2000" "2000"
      dockerctrl stop && >/dev/null
      vmctrl "--state-running" "shutdown" && >/dev/null
      setpid "0" >/dev/null
    }
  }
}

# 01 - Check if there is at least one mounted volume
function gluster01 {
  [ -f "/srv/containers/scripts/myip" ] && {
    export beepsound="0"
    cluster00
  } || {
    echo "$data ERROR: Not a single default volume was found!" >> $logpath
    echo "$data ERROR: Shutting down all containers!" >> $logpath
    beeps "1000" "1000"
    dockerctrl stop && >/dev/null
    vmctrl "--state-running" "shutdown" && >/dev/null
    setpid "0" >/dev/null
  }
}

# 02 - Ping if there is connection to Gateway route
function cluster00 {
  if ping -c 1 $IP3 >/dev/null; then
    export beepsound="0"
    cluster01
  else
    echo "$data ERROR: Gateway not found" >> $logpath
    echo "$data ERROR: Shutting down all containers and VMs!" >> $logpath
    beeps "2000" "1000"
    dockerctrl stop && >/dev/null
    vmctrl "--state-running" "shutdown" && >/dev/null
    setpid "0" >/dev/null
  fi
}

# 03 - Ping the other node through LAN
function cluster01 {
  if ping -c 1 $IP1 >/dev/null && ping -c 1 $IP2 > /dev/null; then
    export beepsound="0"
    cluster02
  else
    echo "$data ERROR: The other node doesn't respond." >> $logpath
    echo "$data ERROR: Starting containers and VMs myself!" >> $logpath
    dockerctrl start && >/dev/null
    vmctrl "--state-shutoff" "start" && >/dev/null
    setpid "1" >/dev/null
  fi
}

# 04 - Ping the other node through reserved NIC
function cluster02 {
  if ping -c 1 "$HOSTNAME1" >/dev/null && ping -c 1 "$HOSTNAME2" >/dev/null; then
    export beepsound="0"
    cluster03
  else
    echo "$data ERROR: All Ok but can't connect Reserved NIC?!" >> $logpath
    echo "$data ERROR: Shutting down all containers!" >> $logpath
    beeps "1000" "2000"
    dockerctrl stop && >/dev/null
    vmctrl "--state-running" "shutdown" && >/dev/null
    setpid "0" >/dev/null
  fi
}

# 05 - Checking for PID.File on the other node
function cluster03 {
  [ "$HOSTNAME" = "$HOSTNAME1" ] && {
    checking=$(ssh $USERNAME@$HOSTNAME2 "cat /home/$USERNAME/.lockha") &&
    cluster04
  } || {
    checking=$(ssh $USERNAME@$HOSTNAME1 "cat /home/$USERNAME/.lockha") &&
    cluster04
  }
}

# 06 - Starting or stopping all containers and VMs accordingly
# If stopping, will wait 20s!
function cluster04 {
  [ "$checking" = "1" ] && {
    setpid "0" >/dev/null
    dockerctrl stop && >/dev/null
    vmctrl "--state-running" "shutdown" && >/dev/null
    echo "$data Everything is Ok! Omitting duplicated and clearing older logs." > $logpath
    echo "$data All containers and Virtual Machines are stopped on this node!" >> $logpath
  } || {
    setpid "1" >/dev/null
    sleep 20
    dockerctrl start && >/dev/null
    vmctrl "--state-shutoff" "start" && >/dev/null
    echo "$data Everything is Ok! Omitting duplicated and clearing older logs." > $logpath
    echo "$data All containers and Virtual Machines are running on this node!" >> $logpath
  }
}

##############
# Acessories #
##############

# Will wait to all containers to stop or start before continuing!
function dockerctrl {
  docker "$1" $(docker ps -a -q)
}

# Will wait to all VMs to stop or start before continuing!
function vmctrl {
  for i in $(virsh list --all "$1" | awk '{print $2}' | grep -v Nome); do
    virsh "$2" "$i"
  done
}

# Setting PID control file on "/home/$USERNAME/.lockha".
# This randomly ensures that we don't fall on a ping-pong situation,
# with the machine nodes getting the same number for .lockha file!
function setpid {
  sleep $((RANDOM%5))
  echo "$1" > /home/"$USERNAME"/.lockha
}

# All beep configurations are set here.
function beeps {
  [ "$beepsound" -ge "$beeplow" ] && [ "$beepsound" -le "$beephigh" ] && {
    modprobe pcspkr
    env -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER -u SUDO_UID beep -f "$1" -l 200 -r 1
    env -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER -u SUDO_UID beep -f "$2" -l 200 -r 1
    export beepsound=$(($beepsound+1))
  } || {
    echo "Silence! Or I kill you!" >/dev/null
  }
}

# There is no need of ethernet connection!

# ============================================================================ #

# Let's Get Started!
init

exit 1
