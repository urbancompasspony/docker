#!/bin/bash

# Tips #
# DO ON ALL NODES!

# sudo -i
# touch /root/cluster
# nano /root/cluster
# sudo chmod +x /root/cluster
# SUDO cron: "@reboot bash /root/cluster"

# Remember to check if there are .contok and/or .vmok  files!

function init {

################################################################################
# ============================================================================ #

#################
# Control Panel #
#################

# Local Gateway
export IP3="172.20.0.1"

# LAN 01
export IP1="172.20.0.10"

# LAN 02
export IP2="172.20.0.11"

# Change to Yes if this servers has VMs and/or Containers!
export mustcont="no"
export mustvm="no"

# ============================================================================ #
# Advanced Parameters - Doesn't change if you do not know what are you doing!  #

# Reserved NIC 01
export HOSTNAME1="cluster-01"

# Reserved NIC 02
export HOSTNAME2="cluster-02"

# If not setting this, will run as root...
export USERNAME="administrador"

# All logs that are saved or discarded goes here
export logpath="/var/log/gluster"

# Will run 7 times if 0 and 6!
export beeplow="0"
export beephigh="6"

export loglow="0"
export loghigh="6"

# ============================================================================ #
################################################################################

# Preparing Log files
rm -rf $logpath
touch $logpath

# Resetting beep on first run!
export beepsound="0"

# Check if everything if Ok with SSH to connect to another node
eval $(ssh-agent) >/dev/null
ssh-add /home/$USERNAME/.ssh/id_rsa >/dev/null

# This will keep this script running like a daemon!
while true; do
  export data=$(date +"%H:%M %d.%m.%Y")
  sleep 5
  gluster00
done
}

#####################
# High Availability #
#####################

# 00 - Check if GlusterFS service is Running
function gluster00 {
  systemctl is-active --quiet glusterd && {
    gluster01
  } || {
    systemctl start glusterd.service
    systemctl is-active --quiet glusterd && {
    textlog "Glusterd started manually, it was stopped!"
    textlog "Proceeding anyway."
      export beepsound="0"
      gluster01
    } || {
      textlog "ERROR: Glusterd not running!"
      textlog "ERROR: Shutting down all containers!"
      beeps "2000" "2000"
      dockerctrl stop && >/dev/null
      vmctrl "--state-running" "shutdown" && >/dev/null
      setpid "0" >/dev/null
    }
  }
}

# 01 - Check if there are /srv/containers volume!
function gluster01 {
  [ "$mustcont" = "yes" ] && {
    [ -f "/srv/containers/.contok" ] && {
      export beepsound="0"
      gluster02
    } || {
      textlog "ERROR: Containers volume was not found!"
      beeps "1000" "1000"
      dockerctrl stop && >/dev/null
      setpid "0" >/dev/null
    }
  } || {
    gluster02
  }
}

# 02 - Check if there are /srv/virtualmachines volume!
function gluster02 {
  [ "$mustvm" = "yes" ] && {
    [ -f "/srv/virtualmachines/.vmok" ] && {
      export beepsound="0"
      cluster00
    } || {
      textlog "ERROR: Virtual Machine volume was not found!"
      beeps "1000" "1000"
      vmctrl "--state-running" "shutdown" && >/dev/null
      setpid "0" >/dev/null
  } || {
    cluster00
  }
}

# 03 - Ping if there are connection to Gateway route
function cluster00 {
  if ping -c 1 $IP3 >/dev/null; then
    export beepsound="0"
    cluster01
  else
    textlog "ERROR: Gateway not found"
    textlog "ERROR: Shutting down all containers and virtual machines!"
    beeps "2000" "1000"
    dockerctrl stop && >/dev/null
    vmctrl "--state-running" "shutdown" && >/dev/null
    setpid "0" >/dev/null
  fi
}

# 04 - Ping the other node through LAN
function cluster01 {
  if ping -c 1 $IP1 >/dev/null && ping -c 1 $IP2 > /dev/null; then
    export beepsound="0"
    cluster02
  else
    textlog "ERROR: The other node doesn't respond."
    textlog "ERROR: Starting containers and virtual machines myself!"
    dockerctrl start && >/dev/null
    vmctrl "--state-shutoff" "start" && >/dev/null
    setpid "1" >/dev/null
  fi
}

# 05 - Ping the other node through reserved NIC
function cluster02 {
  if ping -c 1 "$HOSTNAME1" >/dev/null && ping -c 1 "$HOSTNAME2" >/dev/null; then
    export beepsound="0"
    cluster03
  else
    textlog "ERROR: All Ok but can't connect Reserved NIC?!"
    textlog "ERROR: Shutting down all containers and virtual machines!"
    beeps "1000" "2000"
    dockerctrl stop && >/dev/null
    vmctrl "--state-running" "shutdown" && >/dev/null
    setpid "0" >/dev/null
  fi
}

# 06 - Checking for PID.File on the other node
function cluster03 {
  [ "$HOSTNAME" = "$HOSTNAME1" ] && {
    checking=$(ssh $USERNAME@$HOSTNAME2 "cat /home/$USERNAME/.lockha") &&
    cluster04
  } || {
    checking=$(ssh $USERNAME@$HOSTNAME1 "cat /home/$USERNAME/.lockha") &&
    cluster04
  }
}

# 07 - Starting or stopping all containers and VMs accordingly
# If stopping, will wait 20s!
function cluster04 {
  [ "$checking" = "1" ] && {
    setpid "0" >/dev/null
    dockerctrl stop && >/dev/null
    vmctrl "--state-running" "shutdown" && >/dev/null
    textlog "Everything is Ok!"
    textlog "All containers and Virtual Machines are stopped on this node!"
  } || {
    setpid "1" >/dev/null
    sleep 20
    dockerctrl start && >/dev/null
    vmctrl "--state-shutoff" "start" && >/dev/null
    textlog "Everything is Ok!"
    textlog "All containers and Virtual Machines are running on this node!"
  }
}

# Will wait to all containers to stop or start before continuing!
# Extra Security check: If "/srv/containers" doesn't exist, after all checks, stop all containers!
function dockerctrl {
  [ -f /srv/containers/.contok ] && {
    docker "$1" $(docker ps -a -q)
  } || {
    [ "$mustcont" = "yes" ] && {
      textlog "ERROR: Containers volume was not found after all checks!"
      textlog "ERROR: Shutting down all containers that are still alive!"
      textlog "Virtual Machines maybe are still running."
      docker stop $(docker ps -a -q)
    } || {
      echo "." >/dev/null
    }
  }
}

# Will wait all VMs to stop or start before continuing!
# If there is no /mnt/vms, do nothing!
function vmctrl {
  [ -f /mnt/virtualmachines/.vmok ] && {
    for i in $(virsh list --all "$1" | awk '{print $2}' | grep -v Nome); do
      virsh "$2" "$i"
    done
  } || {
    [ "$mustvm" = "yes" ] && {
      textlog "Virtual Machine volume was not found after all checks!"
      textlog "ERROR: Shutting down all virtual machines that are still alive!"
      textlog "Containers maybe are still running."
      vmctrl "--state-running" "shutdown" && >/dev/null
    } || {
      echo "." >/dev/null
    }
  }
}

# Setting PID control file on "/home/$USERNAME/.lockha".
# This randomly ensures that we don't fall on a ping-pong situation,
# with the machine nodes getting the same number for .lockha file!
function setpid {
  sleep $((RANDOM%5))
  echo "$1" > /home/"$USERNAME"/.lockha
}

# All beep configurations are set here.
function beeps {
  [ "$beepsound" -ge "$beeplow" ] && [ "$beepsound" -le "$beephigh" ] && {
    modprobe pcspkr
    env -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER -u SUDO_UID beep -f "$1" -l 200 -r 1
    env -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER -u SUDO_UID beep -f "$2" -l 200 -r 1
    export beepsound=$(($beepsound+1))
  } || {
    echo "Silence! Or I kill you!" >/dev/null
  }
}

function textlog {
  echo "$data $1" | tee -a $logpath
}

# ============================================================================ #

# Let's Get Started!
init

exit 1
