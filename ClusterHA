#!/bin/bash

function init {
# ============================================================================ #

# SUDO Cron: "@reboot sleep 15; bash /home/ubuntu/Script/Cluster"
# Run every 5s, if stopping containers, will wait 20s to stop all before start.

# Control Panel #

IP1="172.20.0.10"
HOSTNAME1="cluster-01"

IP2="172.20.0.11"
HOSTNAME2="cluster-02"

IP3="172.20.0.1"

USERNAME="administrador"

volumepaths="/srv/containers /mnt/pool01 /mnt/pool02 /mnt/pool03 /mnt/volume01 /mnt/volume02 /mnt/volume03"

lognull="/dev/null"
logpath="/var/log/gluster"

# ============================================================================ #

rm -rf $logpath
touch $logpath

# Beep 7 times, because 0 and 6!
beepsound="0"

echo "Welcome to High Availability Cluster Server for Docker!" >> $logpath

eval $(ssh-agent) 1>$lognull 2>$lognull
ssh-add /home/$USERNAME/.ssh/id_rsa 1>$lognull 2>$lognull

while true; do
  data=$(date +"%H:%M %d.%m.%Y")
  sleep 5
  gluster00
done
}

# 00 - Check if GlusterFS service is Running
function gluster00 {
  systemctl is-active --quiet glusterd && {
    gluster01
  } || {
    systemctl start glusterd.service
    systemctl is-active --quiet glusterd && {
    echo "$data Glusterd started manually, it was stopped!" >> $logpath
      gluster01
    } || {
      echo "$data ERROR: Glusterd not running!" >> $logpath
      echo "$data ERROR: Shutting down all containers!" >> $logpath

      # Higher Beep
      [ "$beepsound" -ge "0" ] && [ "$beepsound" -le "6" ] && {
        modprobe pcspkr
        env -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER -u SUDO_UID beep -f 2000 -l 200 -r 1
        env -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER -u SUDO_UID beep -f 2000 -l 200 -r 1
        beepsound=$(($beepsound+1))
      } || {
        echo "Silence! Or I kill you!" > $lognull
      }

      dockerctrl stop && 1>$lognull 2>$lognull 
      setpid "0" 1>$lognull 2>$lognull 
    }
  }
}

# 01 - Check if there is any volume
function gluster01 {
  aptab="0"
  for dir in $(echo $volumepaths); do
    aptab+=$(cat /etc/mtab | grep $dir 1>$lognull 2>$lognull && echo " yes" || echo " no")
  done

  checkdir="0"
  checkdir=$(grep -o 'yes' <<<"$aptab" | wc -l)

  [ "$checkdir" = "0" ] && {
    echo "$data ERROR: Not a single default volume was found!" >> $logpath
    echo "$data ERROR: Shutting down all containers!" >> $logpath

    # Lower Beep
    [ "$beepsound" -ge "0" ] && [ "$beepsound" -le "6" ] && {
      modprobe pcspkr
      env -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER -u SUDO_UID beep -f 1000 -l 200 -r 1
      env -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER -u SUDO_UID beep -f 1000 -l 200 -r 1
      beepsound=$(($beepsound+1))
    } || {
      echo "Silence! Or I kill you!" > $lognull
    }

    dockerctrl stop && 1>$lognull 2>$lognull 
    setpid "0" 1>$lognull 2>$lognull 
  } || {
    cluster00
  }
}

# 02- Ping if there is connection to Gateway route.
function cluster00 {
  if ping -c 1 $IP3 &> $lognull; then
    cluster01
  else
    echo "$data ERROR: Gateway not found" >> $logpath
    echo "$data ERROR: Shutting down all containers!" >> $logpath

    [ "$beepsound" -ge "0" ] && [ "$beepsound" -le "6" ] && {
      modprobe pcspkr
      env -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER -u SUDO_UID beep -f 2000 -l 200 -r 1
      env -u SUDO_GID -u SUDO_COMMAND -u SUDO_USER -u SUDO_UID beep -f 1000 -l 200 -r 1
      beepsound=$(($beepsound+1))
    } || {
      echo "Silence! Or I kill you!" > $lognull
    }

    dockerctrl stop && 1>$lognull 2>$lognull 
    setpid "0" 1>$lognull 2>$lognull 
  fi
}

# 03 - Ping the other node.
function cluster01 {
  beepsound="0"

  if ping -c 1 $IP1 &> $lognull && ping -c 1 $IP2 &> $lognull; then
    cluster02
  else
    echo "$data ERROR: The other node doesn't respond." >> $logpath
    echo "$data ERROR: Starting containers myself!" >> $logpath

    dockerctrl start && 1>$lognull 2>$lognull 
    setpid "1" 1>$lognull 2>$lognull 
  fi
}

# 04 - Checking for PIDFile on the other node.
function cluster02 {
  [ "$HOSTNAME" = "$HOSTNAME1" ] && {
    checking=$(ssh $USERNAME@$HOSTNAME2 "cat /home/$USERNAME/.lockha") &&
    cluster03
  } || {
    checking=$(ssh $USERNAME@$HOSTNAME1 "cat /home/$USERNAME/.lockha") &&
    cluster03
  }
}

function cluster03 {
  [ "$checking" = "1" ] && {
    setpid "0" 1>$lognull 2>$lognull
    dockerctrl stop && 1>$lognull 2>$lognull
    echo "$data Containers are Stopped!" >> $logpath
  } || {
    setpid "1" 1>$lognull 2>$lognull
    sleep 20
    dockerctrl start && 1>$lognull 2>$lognull
    echo "$data Containers are Running!" >> $logpath
  }
}

function dockerctrl {
  docker "$1" $(docker ps -a -q) 1>$lognull 2>$lognull
}

function setpid {
  # This random ensures that we don't fall on a ping-pong situation,
  # with the machines getting the same number for .lockha file!
  sleep $((RANDOM%5))
  echo "$1" > /home/$USERNAME/.lockha
}

init

exit 1
