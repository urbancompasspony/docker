#!/bin/bash

# When upgrading, answer N all times to keep the files!
# Then restart openfire service, through restarting docker; or "service restart openfire"

# If needed:
# mariadb -u root -p
# GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION;
# GRANT ALL ON *.* to root@'xxx.xxx.xxx.xxx' IDENTIFIED BY 'P4ssw0rd';
# GRANT ALL ON *.* to openfire@'xxx.xxx.xxx.xxx' IDENTIFIED BY 'P4ssw0rd';
# FLUSH PRIVILEGES;

# Global config for replication:
export NOMECONTAINER="openfire"

# IP FIXO DO NOVO CONTAINER
export var1

function checkA {
  [ "$EUID" -ne 0 ] && {
    echo "Execute esse script como Root!"
    exit
    }
}

function checkB {
  export var1

  [ -f "/srv/containers/$NOMECONTAINER/Information" ] && {
    dialog --title "Dados de $NOMECONTAINER encontrados!" --yesno "Deseja refazer o container?" 6 40
    [ $? = 0 ] && {
    dialog --title "Recriando o container $NOMECONTAINER" --yesno "Deseja reaproveitar os DADOS da instalação anterior?" 6 40
      [ $? = 0 ] && {
        var1=$(sed -n '1p' /srv/containers/$NOMECONTAINER/Information)
        
        [ $(docker stop "$NOMECONTAINER") ] && {
          docker rm "$NOMECONTAINER"

          checkC
        } || {
          checkC
        }
        
      } || {
        docker stop "$NOMECONTAINER"
        docker rm "$NOMECONTAINER"
        
        datetime=$(date +"%d-%m %H-%M")
        mkdir -p /srv/containers/.backupcnt
        zip "/srv/containers/.backupcnt/$NOMECONTAINER-$datetime.zip" -r /srv/containers/$NOMECONTAINER
        
        rm -iR /srv/containers/"$NOMECONTAINER"

        menu
        }
    } || {
      echo "A instalação local será mantida! Saindo..."
      exit
    }
  } || {
    menu
    }
}

function menu {
  export var1

  VALUE1=""
  
  VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 8 40 0 \
"Local IP: " 1 1 "$VALUE1" 1 10 20 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

  [ $? -ne 0 ] && exit
  var1=$(echo "$VALUE0" | sed -n 1p)
  
  [ -z "$var1" ] && {
    dialog --title "ERRO" --msgbox "Não deixe nenhum campo vazio!" 8 40
    menu
  } || {
    checkC
    }
}

function checkC {
  #IPMachine=$(hostname -I | awk '{print $1}')
  MyIP=$(cat /srv/containers/scripts/myip)
  [ "$MyIP" = "$var1" ] && {
    dialog --title "ERRO" --msgbox "Conflito de IP detectado! \nMude para outro IP." 6 40
    menu
  } || {
    create
  }
}

function create {
  export var1
  
  mkdir -p /srv/containers/"$NOMECONTAINER"/etc/
  mkdir -p /srv/containers/"$NOMECONTAINER"/var/
  mkdir -p /srv/containers/"$NOMECONTAINER"/usr/
  mkdir -p /srv/containers/"$NOMECONTAINER"/default/

  touch /srv/containers/"$NOMECONTAINER"/Information
  echo "$var1" > /srv/containers/"$NOMECONTAINER"/Information

  docker run -d \
--name=$NOMECONTAINER \
--network macvlan \
--ip=$var1 \
--dns=1.1.1.1  \
--dns=127.0.0.1 \
--hostname=$NOMECONTAINER \
--no-healthcheck \
--restart=unless-stopped \
-v /etc/localtime:/etc/localtime:ro \
-v /srv/containers/"$NOMECONTAINER"/etc/:/etc/openfire/ \
-v /srv/containers/"$NOMECONTAINER"/var/:/var/lib/openfire/ \
-v /srv/containers/"$NOMECONTAINER"/usr/:/usr/share/openfire/ \
-v /srv/containers/"$NOMECONTAINER"/default/:/etc/default/ \
urbancompasspony/openfire:latest
}

function clean {
  unset var1
}

# Start
checkA
checkB
clean

docker restart $NOMECONTAINER

# Instalation and Config. of OpenFire Server!
docker exec $NOMECONTAINER bash -c "wget https://www.igniterealtime.org/downloadServlet?filename=openfire/openfire_4.8.1_all.deb -O openfire.deb"
clear
echo ""
echo "Getting Spark 4.8.1 from https://www.igniterealtime.org/downloads/"
echo "Enter Container and run: dpkg -i openfire.deb"
echo "Then restart container manually. CHECK IF THERE IS A NEW VERSION OF SPARK AND EDIT THIS SCRIPT!"
echo ""
sleep 3

exit 1
