#!/bin/bash

function pihole0 {
  testpihole=$(docker image ls | grep pihole)

  [ "$testpihole" = "" ] || {
    datetime=$(date +"%d/%m - %H:%m:%S:"); clear
    echo ""; echo "Checando por updates do PiHole"
    docker pull "$docker_repo"
    clear

    for i in $(find /srv/containers -maxdepth 1 -name '*pihole*'); do
      i2=$(basename "$i")

      var1=$(sed -n '1p' /srv/containers/"$i2"/Information)
      var2=$(sed -n '2p' /srv/containers/"$i2"/Information)
      var3=$(sed -n '3p' /srv/containers/"$i2"/Information)
      var4=$(sed -n '4p' /srv/containers/"$i2"/Information)
      var5=$(sed -n '5p' /srv/containers/"$i2"/Information)

      pihole1

      docker exec "$i2" rm /etc/pihole/pihole-FTL.conf
      docker exec "$i2" touch /etc/pihole/pihole-FTL.conf
      docker exec "$i2" bash -c "echo 'LOCAL_IPV4=0.0.0.0' >> /etc/pihole/pihole-FTL.conf"
      docker exec "$i2" bash -c "echo 'RATE_LIMIT=0/0' >> /etc/pihole/pihole-FTL.conf"

      [ -f /srv/containers/"$i2"/dnsmasq.d/02-custom-settings.conf ] || {
        docker exec "$i2" bash -c "echo '# domain forward lookups' > /etc/dnsmasq.d/02-custom-settings.conf"
        docker exec "$i2" bash -c "echo '#server=/ad.domain.local/191.168.0.10' >> /etc/dnsmasq.d/02-custom-settings.conf"
        docker exec "$i2" bash -c "echo '# domain PTR/reverse lookups' >> /etc/dnsmasq.d/02-custom-settings.conf"
        docker exec "$i2" bash -c "echo '#server=/0.168.192.in-addr.arpa/192.168.0.10' >> /etc/dnsmasq.d/02-custom-settings.conf"
        docker exec "$i2" bash -c "echo '# Custom DNS Max Queries and Cache' >> /etc/dnsmasq.d/02-custom-settings.conf"
        docker exec "$i2" bash -c "echo 'dns-forward-max=5096' >> /etc/dnsmasq.d/02-custom-settings.conf"
        docker exec "$i2" bash -c "echo 'min-cache-ttl=300' >> /etc/dnsmasq.d/02-custom-settings.conf"
        docker exec "$i2" bash -c "echo 'rebind-domain-ok=' >> /etc/dnsmasq.d/02-custom-settings.conf"
      } && {
        echo "." >/dev/null
      }

      docker exec "$i2" bash -c "pihole -g -r recover"
      docker exec "$i2" bash -c "rm /etc/pihole/pihole-FTL.db"

      docker restart "$i2"

    echo "$datetime Nesta data os serviÃ§os de DNS e bloqueios de sites do $i2 foram atualizados e suas listas
foram revalidadas!
" | sudo tee -a "$file"
    done
    enter0
  } && {
    echo "." > /dev/null
  }
}

function pihole1 {
  docker stop "$i2" &&
  docker rm "$i2" &&

  [ "$var1" = "host" ] || [ "$var1" = "Host" ] || [ "$var1" = "HOST" ] || [ "$var1" = "hostname" ] || [ "$var1" = "localhost" ] && {
  docker run -d \
--name="$i2" \
--network host \
--hostname="$var4" \
--no-healthcheck \
--restart=unless-stopped \
--shm-size=512m \
-e SERVERIP=$var3 \
-e WEBPASSWORD=$var2 \
-v /etc/localtime:/etc/localtime:ro \
-v /srv/containers/"$i2"/etc/:/etc/pihole \
-v /srv/containers/"$i2"/dnsmasq.d/:/etc/dnsmasq.d \
-v /srv/containers/"$i2"/log/:/var/log/pihole \
-p 80:80 \
-p 443:443 \
-p 67:67/tcp \
-p 67:67/udp \
-p 53:53/tcp \
-p 53:53/udp \
$docker_repo
  } || {
  docker run -d \
--name="$i2" \
--network $var5 \
--ip=$var1 \
--dns=1.1.1.1  \
--hostname="var4" \
--no-healthcheck \
--restart=unless-stopped \
--shm-size=512m \
-e SERVERIP=$var1 \
-e WEBPASSWORD=$var2 \
-v /etc/localtime:/etc/localtime:ro \
-v /srv/containers/"$i2"/etc/:/etc/pihole \
-v /srv/containers/"$i2"/dnsmasq.d/:/etc/dnsmasq.d \
-v /srv/containers/"$i2"/log/:/var/log/pihole \
-p 80:80 \
-p 443:443 \
-p 67:67/tcp \
-p 67:67/udp \
-p 53:53/tcp \
-p 53:53/udp \
$docker_repo
  }
}

pihole0
pihole1

exit 1
