#!/bin/bash

# Strict error handling
set -euo pipefail

# Script version
__ScriptVersion="2.0"

function check_dependencies {
  # Check if rsync is installed
  if ! command -v rsync &> /dev/null; then
    echo "ERRO: rsync não está instalado. Instale com: sudo apt install rsync"
    exit 2
  fi
  
  # Check if mountpoint is available
  if ! command -v mountpoint &> /dev/null; then
    echo "ERRO: mountpoint não está disponível. Instale com: sudo apt install util-linux"
    exit 2
  fi
  
  echo "✓ Dependências verificadas"
}

function check_disk_space {
  local origem="$1"
  local destino="$2"
  
  # Get available space in destination (in KB)
  local espaco_disponivel=$(df "$destino" | tail -1 | awk '{print $4}')
  
  # Get space needed from source (in KB) - using apparent size for speed
  local espaco_origem=$(du -s --apparent-size "$origem" | awk '{print $1}')
  
  # Convert to MB for display
  local disponivel_mb=$(( espaco_disponivel / 1024 ))
  local necessario_mb=$(( espaco_origem / 1024 ))
  
  echo "Espaço disponível: ${disponivel_mb} MB"
  echo "Espaço necessário: ${necessario_mb} MB"
  
  # Check if we have enough space (add 10% buffer)
  local buffer_espaco=$(( espaco_origem + (espaco_origem / 10) ))
  if [ "$espaco_disponivel" -lt "$buffer_espaco" ]; then
    echo "ERRO: Espaço insuficiente! Necessário: $((buffer_espaco / 1024)) MB (com 10% buffer)"
    exit 1
  fi
  
  echo "✓ Espaço em disco suficiente"
}
  local origem="$1"
  local modo="$2"
  
  # Verifica se parâmetro foi passado
  if [ -z "$origem" ]; then
    echo "ERRO: Caminho de origem não especificado!"
    exit 1
  fi
  
  # Verifica se diretório existe
  if [ ! -d "$origem" ]; then
    echo "ERRO: Diretório $origem não existe!"
    exit 1
  fi
  
  # Verifica montagem baseado no modo
  case "$modo" in
    "M1"|"M3")
      # Origem deve estar montada
      if ! mountpoint -q "$origem" 2>/dev/null; then
        echo "ERRO: $origem deve estar montado para o modo $modo!"
        exit 1
      fi
      echo "✓ $origem está montado"
      ;;
    "M2"|"L")
      # Origem é pasta comum - apenas verifica se está montado para informar
      if mountpoint -q "$origem" 2>/dev/null; then
        echo "✓ $origem está montado"
      fi
      ;;
  esac
  
  # Verifica se não está vazio
  if [ ! "$(ls -A "$origem")" ]; then
    echo "ERRO: $origem está vazio!"
    exit 1
  fi
  
  echo "✓ $origem OK e não está vazio"
}

function check_destination {
  local destino="$1"
  local modo="$2"
  
  # Verifica se parâmetro foi passado
  if [ -z "$destino" ]; then
    echo "ERRO: Caminho de destino não especificado!"
    exit 1
  fi
  
  # Cria o diretório de destino se não existir
  if [ ! -d "$destino" ]; then
    echo "Criando diretório de destino: $destino"
    sudo mkdir -p "$destino"
    if [ $? -ne 0 ]; then
      echo "ERRO: Não foi possível criar o diretório $destino!"
      exit 1
    fi
  fi
  
  # Verifica montagem baseado no modo
  case "$modo" in
    "M2"|"M3")
      # Destino deve estar montado
      if ! mountpoint -q "$destino" 2>/dev/null; then
        echo "ERRO: $destino deve estar montado para o modo $modo!"
        echo "Volumes disponíveis em /mnt:"
        ls -la /mnt/ 2>/dev/null || echo "Nenhum volume em /mnt"
        exit 1
      fi
      echo "✓ $destino está montado"
      ;;
    "M1"|"L")
      # Destino é pasta comum - apenas verifica se está montado para informar
      if mountpoint -q "$destino" 2>/dev/null; then
        echo "✓ $destino está montado"
      fi
      ;;
  esac
  
  # Para modo L, verifica se destino não está vazio (exceto se for novo)
  if [ "$modo" = "L" ] && [ "$(ls -A "$destino" 2>/dev/null | wc -l)" -gt 0 ]; then
    echo "✓ $destino não está vazio (modo L)"
  fi
  
  # Verifica se o destino é gravável
  if [ ! -w "$destino" ]; then
    echo "ERRO: Sem permissão de escrita em $destino!"
    exit 1
  fi
  
  echo "✓ $destino OK para backup"
}

function rsync_backup {
  local origem="$1"
  local destino="$2"
  local modo="$3"
  
  # Create log file with timestamp
  local timestamp=$(date '+%Y%m%d_%H%M%S')
  local log_file="${destino}/backup_${timestamp}.log"
  
  echo "Iniciando sincronização de $origem para $destino (modo $modo)..."
  echo "Log será salvo em: $log_file"
  echo "Comando: rsync --delete -aHAXv --numeric-ids --sparse \"$origem\" \"$destino\""
  
  # Execute rsync with proper error handling
  if sudo rsync --delete -aHAXv --numeric-ids --sparse "$origem" "$destino" 2>&1 | tee "$log_file"; then
    local rsync_exit_code=${PIPESTATUS[0]}
    
    # Check rsync exit code
    case $rsync_exit_code in
      0)
        echo "✓ Backup concluído com sucesso!"
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Backup realizado com sucesso" >> "$log_file"
        ;;
      1)
        echo "ERRO: Erro de sintaxe ou uso do rsync (código $rsync_exit_code)"
        exit 1
        ;;
      2)
        echo "ERRO: Incompatibilidade de protocolo (código $rsync_exit_code)"
        exit 2
        ;;
      3)
        echo "ERRO: Erro ao selecionar arquivos/diretórios (código $rsync_exit_code)"
        exit 3
        ;;
      11)
        echo "ERRO: Erro de I/O de arquivo (código $rsync_exit_code)"
        exit 11
        ;;
      23)
        echo "AVISO: Transferência parcial devido a erro (código $rsync_exit_code)"
        echo "Verifique o log em $log_file para detalhes"
        ;;
      *)
        echo "ERRO: Rsync falhou com código $rsync_exit_code"
        echo "Verifique o log em $log_file para detalhes"
        exit $rsync_exit_code
        ;;
    esac
  else
    echo "ERRO: Falha ao executar rsync!"
    exit 1
  fi
}

function show_help {
  echo "Uso: $0 /caminho/origem /caminho/destino MODO"
  echo ""
  echo "MODOS:"
  echo "  L   = Pastas locais (origem e destino são pastas comuns, não podem estar vazias)"
  echo "  M1  = Origem montada + Destino pasta comum"
  echo "  M2  = Origem pasta comum + Destino montado"
  echo "  M3  = Origem e destino montados (volumes em /mnt)"
  echo ""
  echo "Exemplos:"
  echo "  $0 /home/usuario /backup L"
  echo "  $0 /mnt/pendrive /home/backup M1"
  echo "  $0 /var/www /mnt/backup-hd M2"
  echo "  $0 /mnt/dados /mnt/backup M3"
}

# Validação dos parâmetros
if [ $# -ne 3 ]; then
  show_help
  exit 1
fi

origem="$1"
destino="$2"
modo="$3"

# Valida o modo
case "$modo" in
  "L"|"M1"|"M2"|"M3")
    ;;
  *)
    echo "ERRO: Modo '$modo' inválido!"
    show_help
    exit 1
    ;;
esac

echo "=== Backup com Modo $modo ==="
echo "Origem: $origem"
echo "Destino: $destino"
echo ""

case "$modo" in
  "L")
    echo "Modo L: Pastas locais - ambas devem existir e não estar vazias"
    ;;
  "M1")
    echo "Modo M1: Origem montada -> Destino pasta comum"
    ;;
  "M2")
    echo "Modo M2: Origem pasta comum -> Destino montado"
    ;;
  "M3")
    echo "Modo M3: Origem montada -> Destino montado"
    ;;
esac

echo ""

# Executa as verificações
echo "=== Verificações Iniciais ==="
check_dependencies
check_source "$origem" "$modo"
check_destination "$destino" "$modo"
check_disk_space "$origem" "$destino"

echo ""
echo "=== Iniciando Backup ==="
rsync_backup "$origem" "$destino" "$modo"
