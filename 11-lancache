#!/bin/bash

# Global config for replication:
export NOMECONTAINER="lancache"

# IP FIXO DO CONTAINER LANCACHE-DNS
export var1
# IP FIXO DO CONTAINER LANCACHE
export var2
# IP do DNS alvo na rede
export var3
# DIRETÓRIO DO CACHE
export var4


function checkA {
  [ "$EUID" -ne 0 ] && {
    echo "Execute esse script como Root!"
    exit
    }
}

function checkB {
  export var1; export var2; export var3; export var4

  [ -f "/srv/containers/$NOMECONTAINER/Information" ] && {
    dialog --title "Dados de $NOMECONTAINER encontrados!" --yesno "Deseja refazer o container?" 6 40
    [ $? = 0 ] && {
    dialog --title "Recriando o container $NOMECONTAINER" --yesno "Deseja reaproveitar os DADOS da instalação anterior?" 6 40
      [ $? = 0 ] && {
        var1=$(sed -n '1p' /srv/containers/$NOMECONTAINER/Information)
        var2=$(sed -n '2p' /srv/containers/$NOMECONTAINER/Information)
        var3=$(sed -n '3p' /srv/containers/$NOMECONTAINER/Information)
        var4=$(sed -n '4p' /srv/containers/$NOMECONTAINER/Information)
        
        [ $(docker stop "$NOMECONTAINER") ] || [ $(docker stop "$NOMECONTAINER-dns") ] && {
          docker rm "$NOMECONTAINER"
          docker rm "$NOMECONTAINER-dns"

          create
        } || {
          create
        }
        
      } || {
        docker stop "$NOMECONTAINER"
        docker stop "$NOMECONTAINER-dns"
        docker rm "$NOMECONTAINER"
        docker rm "$NOMECONTAINER-dns"
        
        datetime=$(date +"%d-%m %H-%M")
        mkdir -p /srv/containers/.backupcnt
        zip "/srv/containers/.backupcnt/$NOMECONTAINER-$datetime.zip" -r /srv/containers/$NOMECONTAINER
        
        rm -iR /srv/containers/"$NOMECONTAINER"

        menu
        }
    } || {
      echo "A instalação local será mantida! Saindo..."
      exit
    }
  } || {
    menu
    }
}

function menu {
  export var1; export var2; export var3; export var4

  VALUE1=""; VALUE2=""; VALUE3=""; VALUE4="/srv/containers/$NOMECONTAINER"

  VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Containers: $NOMECONTAINER \n& $NOMECONTAINER-dns" 11 40 0 \
"CacheIPA:" 1 1 "$VALUE1" 1 10 20 0 \
"CacheIPB:" 2 1 "$VALUE2" 2 10 20 0 \
"LAN DNS :" 3 1 "$VALUE3" 3 10 20 0 \
"Cch PATH:" 4 1 "$VALUE4" 4 10 40 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

  [ $? -ne 0 ] && exit
  var1=$(echo "$VALUE0" | sed -n 1p)
  var2=$(echo "$VALUE0" | sed -n 2p)
  var3=$(echo "$VALUE0" | sed -n 3p)
  var4=$(echo "$VALUE0" | sed -n 4p)
  
  [ -z "$var1" ] || [ -z "$var2" ] || [ -z "$var3" ] || [ -z "$var4" ]&& {
    dialog --title "ERRO" --msgbox "Não deixe nenhum campo vazio!" 8 40
    menu
  } || {
    checkC
    }
}

function checkC {
  #IPMachine=$(hostname -I | awk '{print $1}')
  MyIP=$(cat /srv/containers/scripts/myip)
  [ "$MyIP" = "$var1" ] && {
    dialog --title "ERRO" --msgbox "Conflito de IP detectado! \nMude para outro IP." 6 40
    menu
  } || {
    create
  }
}

function create {
  export var1; export var2
  
  mkdir -p /srv/containers/"$NOMECONTAINER"
  touch /srv/containers/"$NOMECONTAINER"/Information
  echo "$var1" > /srv/containers/"$NOMECONTAINER"/Information
  echo "$var2" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var3" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var4" >> /srv/containers/"$NOMECONTAINER"/Information
  
  docker run -d \
--name="$NOMECONTAINER-dns" \
--hostname="$NOMECONTAINER-dns" \
--network macvlan \
--ip=$var1 \
--no-healthcheck \
--restart unless-stopped \
-p 53:53/udp \
-e USE_GENERIC_CACHE=true \
-e LANCACHE_IP=$var1 \
-e UPSTREAM_DNS=$var3 \
-v /etc/localtime:/etc/localtime:ro \
lancachenet/lancache-dns:latest

  docker run -d \
--name=$NOMECONTAINER \
--hostname="$NOMECONTAINER" \
--network macvlan \
--ip=$var2 \
--no-healthcheck \
--restart unless-stopped \
-p 80:80 \
-p 443:443 \
-e CACHE_INDEX_SIZE=512m \
-e CACHE_MAX_AGE=7d \
-e CACHE_DISK_SIZE=10000m \
-e CACHE_SLICE_SIZE=8m \
-v /etc/localtime:/etc/localtime:ro \
-v "$var4"/data:/data/cache \
-v /srv/containers/"$NOMECONTAINER"/logs:/data/logs \
lancachenet/monolithic:latest
}

function clean {
  unset var1
  unset var2
  unset var3
  unset var4
}

# Start
checkA
checkB
clean

exit 1
