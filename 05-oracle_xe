#!/bin/bash

# =============================================================================
# ### C O N T R O L ### P A N E L ########################################### #
# =============================================================================

# Set container name and hostname here.
export NOMECONTAINER="oraclexe21c"

# From 1 to 10!
var_cont="3"

# MENU NAMES - 123456789 or ABCDEFGHI
function custom_names {
# Static Name!
CustmN1="Container"

CustmN2="Local IP"
CustmN3="OraclePW"
CustmN4="."
CustmN5="."
CustmN6="."
CustmN7="."
CustmN8="."
CustmN9="."
CustmN10="."
}

# MENU DEFAULT VALUES
function custom_values {
# Static Value!
VALUE1="$NOMECONTAINER"

VALUE2="0.0.0.0"
VALUE3="#A1234abc"
VALUE4="0"
VALUE5="0"
VALUE6="0"
VALUE7="0"
VALUE8="0"
VALUE9="0"
VALUE10="0"
}

# Set repository here!
docker_repo="urbancompasspony/centosoracle:latest"

# Adjust if needed
function docker_custom {
docker run -d \
--name=$var1 \
--network macvlan \
--ip=$var2 \
--dns=1.1.1.1  \
--dns=127.0.0.1 \
--hostname=$var1 \
--no-healthcheck \
--restart=unless-stopped \
-v /etc/localtime:/etc/localtime:ro \
-v /srv/containers/"$NOMECONTAINER"/sysconfig:/etc/sysconfig \
-v /srv/containers/"$NOMECONTAINER"/root/.bashrc:/root/.bashrc \
-v /srv/containers/"$NOMECONTAINER"/oradata:/opt/oracle/oradata \
-v /srv/containers/"$NOMECONTAINER"/netadmin:/opt/oracle/homes/OraDBHome21cXE/network/admin \
$docker_repo
}

function makedir {
  mkdir -p /srv/containers/"$NOMECONTAINER"/{oradata,root,netadmin,sysconfig}

  touch /srv/containers/"$NOMECONTAINER"/root/.bashrc
  touch /srv/containers/"$NOMECONTAINER"/netadmin/sqlnet.ora
  touch /srv/containers/"$NOMECONTAINER"/netadmin/listener.ora
  touch /srv/containers/"$NOMECONTAINER"/netadmin/tnsnames.ora
  touch /srv/containers/"$NOMECONTAINER"/sysconfig/oracle-xe-21c.conf
}

function docker_extras {
  export_all

  VALUE1="1521"; VALUE2="AL32UTF8 / WE8MSWIN1252"; VALUE3="ftagricola"

  VALUE_DB=$(dialog --ok-label "Definir" --title "OracleDB" --form "Escolha 1 Charset abaixo!" 11 40 0 \
"LstnPort: " 1 1 "$VALUE1" 1 11 30 0 \
"Char Set: " 2 1 "$VALUE2" 2 11 30 0 \
"DBDomain: " 3 1 "$VALUE3" 3 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && exit
portexp=$(echo "$VALUE_DB" | sed -n 1p)
CHARSETDB=$(echo "$VALUE_DB" | sed -n 2p)
DEDM=$(echo "$VALUE_DB" | sed -n 3p)

  echo -e "LISTENER_PORT=$portexp
EM_EXPRESS_PORT=5500
CHARSET=$CHARSETDB
DBFILE_DEST=
DB_DOMAIN=$DEDM
SKIP_VALIDATIONS=true" >> /srv/containers/"$var1"/sysconfig/oracle-xe-21c.conf

  echo -e "
# User specific aliases and functions for Oracle!
umask 022
ORACLE_SID=XE
ORAENV_ASK=NO
ORACLE_HOME=/opt/oracle/product/21c/dbhomeXE
PATH=$PATH:$ORACLE_HOME/bin
. /opt/oracle/product/21c/dbhomeXE/bin/oraenv

alias listener='lsnrctl status'
alias lservice='lsnrctl service'
alias sqlplus='sqlplus system/$var3@localhost:$portexp/XE.$DEDM'

echo ' '
echo 'listener: alias to check listener and oracle process status!'
echo 'lservice: alias to check listener and oracle process status!'
echo 'sqlplus: alias to check OracleDB status!'
echo ' '
echo 'Show Tables: SELECT USERNAME FROM ALL_USERS ORDER BY USERNAME; '
echo 'Show Tablespaces: SELECT TABLESPACE_NAME FROM USER_TABLESPACES; '
echo 'Show PDB: SELECT PDB_ID, PDB_NAME, STATUS FROM DBA_PDBS ORDER BY PDB_ID; '
echo 'Show All Tables: SELECT table_name, owner, tablespace_name FROM all_tables; '
echo ' '
" >> /srv/containers/"$var1"/root/.bashrc

  docker_extras_2

  docker exec "$var1" bash -c "(echo '$var3'; echo '$var3';) | /etc/init.d/oracle-xe-21c configure"
}

function docker_extras_2 {
  # For specific conditions or business
  [ "$DEDM" = "ftagricola" ] && {

  echo -e "DEFAULT_SERVICE_LISTENER = XE
LISTENER =
  (DESCRIPTION_LIST =
    (DESCRIPTION =
      (ADDRESS = (PROTOCOL = TCP)(HOST = 0.0.0.0)(PORT = 1521))
      (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))
    )
  )" >> /srv/containers/"$var1"/netadmin/listener.ora

  echo -e "NAMES.DIRECTORY_PATH= (TNSNAMES, EZCONNECT)
SQLNET.ALLOWED_LOGON_VERSION=10
SQLNET.ALLOWED_LOGON_VERSION_CLIENT=10
SQLNET.ALLOWED_LOGON_VERSION_SERVER=10" >> /srv/containers/"$var1"/netadmin/sqlnet.ora

  echo -e "XE =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = 0.0.0.0)(PORT = 1521))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = XE.ftagricola)
    )
  )

LISTENER_XE =
  (ADDRESS = (PROTOCOL = TCP)(HOST = 0.0.0.0)(PORT = 1521))

ORACLR_CONNECTION_DATA =
  (DESCRIPTION =
    (ADDRESS_LIST =
      (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))
    )
    (CONNECT_DATA =
      (SID = CLRExtProc)
      (PRESENTATION = RO)
    )
  )" >> /srv/containers/"$var1"/netadmin/tnsnames.ora

  } || {
    # Put more here if needed
    echo "Nothing to do!" >> /dev/null
  }

# =============================================================================
# ########################################################################### #
# =============================================================================

echo "0" > /dev/null
}

function checkA {
  [ "$EUID" -ne 0 ] && {
    echo "Execute esse script como Root! Saindo..."
    exit
    }
}

function export_all {
  export var1; export var2; export var3; export var4; export var5
  export var6; export var7; export var8; export var9; export var10
}

export_all

function var_read {
  var1=$(sed -n '1p' /srv/containers/$NOMECONTAINER/Information)
  var2=$(sed -n '2p' /srv/containers/$NOMECONTAINER/Information)
  var3=$(sed -n '3p' /srv/containers/$NOMECONTAINER/Information)
  var4=$(sed -n '4p' /srv/containers/$NOMECONTAINER/Information)
  var5=$(sed -n '5p' /srv/containers/$NOMECONTAINER/Information)
  var6=$(sed -n '6p' /srv/containers/$NOMECONTAINER/Information)
  var7=$(sed -n '7p' /srv/containers/$NOMECONTAINER/Information)
  var8=$(sed -n '8p' /srv/containers/$NOMECONTAINER/Information)
  var9=$(sed -n '9p' /srv/containers/$NOMECONTAINER/Information)
  var10=$(sed -n '10p' /srv/containers/$NOMECONTAINER/Information)

  VALUE1=$var1; VALUE2=$var2; VALUE3=$var3; VALUE4=$var4; VALUE5=$var5
  VALUE6=$var6; VALUE7=$var7; VALUE8=$var8; VALUE9=$var9; VALUE10=$var10
}

function burn_var {
  export_all

  makedir

  chmod 777 -R /srv/containers/"$NOMECONTAINER"
  touch /srv/containers/"$NOMECONTAINER"/Information

  echo "$var1" > /srv/containers/"$NOMECONTAINER"/Information
  echo "$var2" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var3" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var4" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var5" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var6" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var7" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var8" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var9" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var10" >> /srv/containers/"$NOMECONTAINER"/Information
}

function error {
  dialog --title "ERRO" --msgbox "Não deixe nenhum campo vazio!" 8 40
  menu
}

function checkB {
  export_all

  NOMECONTAINER=$var1

  [ -f "/srv/containers/$NOMECONTAINER/Information" ] && {
    clear
    echo "###################################################################"
    echo "Instalação do container $NOMECONTAINER detectado!"
    echo " "
    echo "Se desejar e/ou precisar refazer este container, pare-o, remova-o," 
    echo "faça um backup de /srv/containers/$NOMECONTAINER,"
    echo "limpe o diretório /srv/containers/$NOMECONTAINER"
    echo "e re-execute este script instalador para refazer tudo!"
    echo " "
    echo "Após isso, remova o novo banco de dados e restaure o backup."
    echo "Sugestão: restaurar apenas 'oradata' primeiro."
    echo " "
    echo "Comandos sugeridos:"
    echo " "
    echo "$ docker stop $NOMECONTAINER"
    echo "$ docker rm $NOMECONTAINER"
    echo "$ sudo rsync -va /srv/containers/$NOMECONTAINER /mnt/DESTINY"
    echo "$ sudo rm -Rf /srv/containers/CUIDADO!$NOMECONTAINER"
    echo " "
    echo "Saindo..."
    echo "###################################################################"
    exit
  } || {
    create
  }
}

function create {
  export_all
  burn_var
  docker_custom
  docker_extras
}

function menu {
  export_all

  [ -f "/srv/containers/$NOMECONTAINER/Information" ] && {
    custom_values
    custom_names
    var_read
  } || {
    custom_names
    custom_values
    }

[ $var_cont -le "0" ] && {
  clear
  echo "Incorrect value of var_cont: $var_cont."
  echo "Exiting..."
  exit
}

[ $var_cont -eq "1" ] && {
VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 8 40 0 \
"$CustmN1: " 1 1 "$VALUE1" 1 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && exit
var1=$(echo "$VALUE0" | sed -n 1p)
}

[ $var_cont -eq "2" ] && {
VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 9 40 0 \
"$CustmN1: " 1 1 "$VALUE1" 1 11 30 0 \
"$CustmN2: " 2 1 "$VALUE2" 2 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && exit
var1=$(echo "$VALUE0" | sed -n 1p)
var2=$(echo "$VALUE0" | sed -n 2p)
}

[ $var_cont -eq "3" ] && {
VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 10 40 0 \
"$CustmN1: " 1 1 "$VALUE1" 1 11 30 0 \
"$CustmN2: " 2 1 "$VALUE2" 2 11 30 0 \
"$CustmN3: " 3 1 "$VALUE3" 3 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && exit
var1=$(echo "$VALUE0" | sed -n 1p)
var2=$(echo "$VALUE0" | sed -n 2p)
var3=$(echo "$VALUE0" | sed -n 3p)
}

[ $var_cont -eq "4" ] && {
VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 11 40 0 \
"$CustmN1: " 1 1 "$VALUE1" 1 11 30 0 \
"$CustmN2: " 2 1 "$VALUE2" 2 11 30 0 \
"$CustmN3: " 3 1 "$VALUE3" 3 11 30 0 \
"$CustmN4: " 4 1 "$VALUE4" 4 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && exit
var1=$(echo "$VALUE0" | sed -n 1p)
var2=$(echo "$VALUE0" | sed -n 2p)
var3=$(echo "$VALUE0" | sed -n 3p)
var4=$(echo "$VALUE0" | sed -n 4p)
}

[ $var_cont -eq "5" ] && {
VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 12 40 0 \
"$CustmN1: " 1 1 "$VALUE1" 1 11 30 0 \
"$CustmN2: " 2 1 "$VALUE2" 2 11 30 0 \
"$CustmN3: " 3 1 "$VALUE3" 3 11 30 0 \
"$CustmN4: " 4 1 "$VALUE4" 4 11 30 0 \
"$CustmN5: " 5 1 "$VALUE5" 5 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && exit
var1=$(echo "$VALUE0" | sed -n 1p)
var2=$(echo "$VALUE0" | sed -n 2p)
var3=$(echo "$VALUE0" | sed -n 3p)
var4=$(echo "$VALUE0" | sed -n 4p)
var5=$(echo "$VALUE0" | sed -n 5p)
}

[ $var_cont -eq "6" ] && {
VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 13 40 0 \
"$CustmN1: " 1 1 "$VALUE1" 1 11 30 0 \
"$CustmN2: " 2 1 "$VALUE2" 2 11 30 0 \
"$CustmN3: " 3 1 "$VALUE3" 3 11 30 0 \
"$CustmN4: " 4 1 "$VALUE4" 4 11 30 0 \
"$CustmN5: " 5 1 "$VALUE5" 5 11 30 0 \
"$CustmN6: " 6 1 "$VALUE6" 6 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && exit
var1=$(echo "$VALUE0" | sed -n 1p)
var2=$(echo "$VALUE0" | sed -n 2p)
var3=$(echo "$VALUE0" | sed -n 3p)
var4=$(echo "$VALUE0" | sed -n 4p)
var5=$(echo "$VALUE0" | sed -n 5p)
var6=$(echo "$VALUE0" | sed -n 6p)
}

[ $var_cont -eq "7" ] && {
VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 14 40 0 \
"$CustmN1: " 1 1 "$VALUE1" 1 11 30 0 \
"$CustmN2: " 2 1 "$VALUE2" 2 11 30 0 \
"$CustmN3: " 3 1 "$VALUE3" 3 11 30 0 \
"$CustmN4: " 4 1 "$VALUE4" 4 11 30 0 \
"$CustmN5: " 5 1 "$VALUE5" 5 11 30 0 \
"$CustmN6: " 6 1 "$VALUE6" 6 11 30 0 \
"$CustmN7: " 7 1 "$VALUE7" 7 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && exit
var1=$(echo "$VALUE0" | sed -n 1p)
var2=$(echo "$VALUE0" | sed -n 2p)
var3=$(echo "$VALUE0" | sed -n 3p)
var4=$(echo "$VALUE0" | sed -n 4p)
var5=$(echo "$VALUE0" | sed -n 5p)
var6=$(echo "$VALUE0" | sed -n 6p)
var7=$(echo "$VALUE0" | sed -n 7p)
}

[ $var_cont -eq "8" ] && {
VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 15 40 0 \
"$CustmN1: " 1 1 "$VALUE1" 1 11 30 0 \
"$CustmN2: " 2 1 "$VALUE2" 2 11 30 0 \
"$CustmN3: " 3 1 "$VALUE3" 3 11 30 0 \
"$CustmN4: " 4 1 "$VALUE4" 4 11 30 0 \
"$CustmN5: " 5 1 "$VALUE5" 5 11 30 0 \
"$CustmN6: " 6 1 "$VALUE6" 6 11 30 0 \
"$CustmN7: " 7 1 "$VALUE7" 7 11 30 0 \
"$CustmN8: " 8 1 "$VALUE8" 8 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && exit
var1=$(echo "$VALUE0" | sed -n 1p)
var2=$(echo "$VALUE0" | sed -n 2p)
var3=$(echo "$VALUE0" | sed -n 3p)
var4=$(echo "$VALUE0" | sed -n 4p)
var5=$(echo "$VALUE0" | sed -n 5p)
var6=$(echo "$VALUE0" | sed -n 6p)
var7=$(echo "$VALUE0" | sed -n 7p)
var8=$(echo "$VALUE0" | sed -n 8p)
}

[ $var_cont -eq "9" ] && {
VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 16 40 0 \
"$CustmN1: " 1 1 "$VALUE1" 1 11 30 0 \
"$CustmN2: " 2 1 "$VALUE2" 2 11 30 0 \
"$CustmN3: " 3 1 "$VALUE3" 3 11 30 0 \
"$CustmN4: " 4 1 "$VALUE4" 4 11 30 0 \
"$CustmN5: " 5 1 "$VALUE5" 5 11 30 0 \
"$CustmN6: " 6 1 "$VALUE6" 6 11 30 0 \
"$CustmN7: " 7 1 "$VALUE7" 7 11 30 0 \
"$CustmN8: " 8 1 "$VALUE8" 8 11 30 0 \
"$CustmN9: " 9 1 "$VALUE9" 9 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && exit
var1=$(echo "$VALUE0" | sed -n 1p)
var2=$(echo "$VALUE0" | sed -n 2p)
var3=$(echo "$VALUE0" | sed -n 3p)
var4=$(echo "$VALUE0" | sed -n 4p)
var5=$(echo "$VALUE0" | sed -n 5p)
var6=$(echo "$VALUE0" | sed -n 6p)
var7=$(echo "$VALUE0" | sed -n 7p)
var8=$(echo "$VALUE0" | sed -n 8p)
var9=$(echo "$VALUE0" | sed -n 9p)
}

[ $var_cont -eq "10" ] && {
VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 17 40 0 \
"$CustmN1: " 1 1 "$VALUE1" 1 11 30 0 \
"$CustmN2: " 2 1 "$VALUE2" 2 11 30 0 \
"$CustmN3: " 3 1 "$VALUE3" 3 11 30 0 \
"$CustmN4: " 4 1 "$VALUE4" 4 11 30 0 \
"$CustmN5: " 5 1 "$VALUE5" 5 11 30 0 \
"$CustmN5: " 6 1 "$VALUE6" 6 11 30 0 \
"$CustmN5: " 7 1 "$VALUE7" 7 11 30 0 \
"$CustmN5: " 8 1 "$VALUE8" 8 11 30 0 \
"$CustmN5: " 9 1 "$VALUE9" 9 11 30 0 \
"$CustmN5: " 10 1 "$VALUE10" 10 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && exit
var1=$(echo "$VALUE0" | sed -n 1p)
var2=$(echo "$VALUE0" | sed -n 2p)
var3=$(echo "$VALUE0" | sed -n 3p)
var4=$(echo "$VALUE0" | sed -n 4p)
var5=$(echo "$VALUE0" | sed -n 5p)
var6=$(echo "$VALUE0" | sed -n 6p)
var7=$(echo "$VALUE0" | sed -n 7p)
var8=$(echo "$VALUE0" | sed -n 8p)
var9=$(echo "$VALUE0" | sed -n 9p)
var10=$(echo "$VALUE0" | sed -n 10p)
}

[ $var_cont -ge "11" ] && {
  clear
  echo "Incorrect value of var_cont: $var_cont."
  echo "Exiting..."
  exit
}

checkB
}

################################################################################

# Start
checkA
menu

################################################################################

#Ending
unset var1
unset var2
unset var3
unset var4
unset var5
unset var6
unset var7
unset var8
unset var9
unset var10

exit 1
