#!/bin/bash

# =============================================================================
# #############################################################################
# =============================================================================

export NOMECONTAINER="NOIP-Custom"

var_cont="1"

function custom_names {
CustmN1="Container"
CustmN2="."
CustmN3="."
CustmN4="."
CustmN5="."
CustmN6="."
CustmN7="."
CustmN8="."
CustmN9="."
CustmN10="."
} # 123456789 or # ABCDEFGHI

function custom_values {
VALUE1="$NOMECONTAINER"
VALUE2="# # # # # # # # # # # #"
VALUE3="# # # # # # # # # # # #"
VALUE4="# # # # # # # # # # # #"
VALUE5="# # # # # # # # # # # #"
VALUE6="# # # # # # # # # # # #"
VALUE7="# # # # # # # # # # # #"
VALUE8="# # # # # # # # # # # #"
VALUE9="# # # # # # # # # # # #"
VALUE10="# # # # # # # # # # # #"
}

docker_repo="coppit/no-ip"

function docker_custom {
docker run -d \
--name=$NOMECONTAINER \
--network host \
--hostname=$NOMECONTAINER \
--no-healthcheck \
--restart=unless-stopped \
-v /etc/localtime:/etc/localtime:ro \
-v /srv/containers/"$NOMECONTAINER"/config:/config \
$docker_repo
}

function docker_extras {
# IF NEEDED:
#docker exec "$NOMECONTAINER" bash -c "echo 'LOCAL_IPV4=0.0.0.0' >> /etc/pihole/pihole-FTL.conf"
#docker restart "$NOMECONTAINER"

echo "0" > /dev/null
}

# =============================================================================
# #############################################################################
# =============================================================================

function export_all {
  export var1; export var2; export var3; export var4; export var5
  export var6; export var7; export var8; export var9; export var10
}

export_all

function var_read {
  var1=$(sed -n '1p' /srv/containers/$NOMECONTAINER/Information)
  var2=$(sed -n '2p' /srv/containers/$NOMECONTAINER/Information)
  var3=$(sed -n '3p' /srv/containers/$NOMECONTAINER/Information)
  var4=$(sed -n '4p' /srv/containers/$NOMECONTAINER/Information)
  var5=$(sed -n '5p' /srv/containers/$NOMECONTAINER/Information)
  var6=$(sed -n '6p' /srv/containers/$NOMECONTAINER/Information)
  var7=$(sed -n '7p' /srv/containers/$NOMECONTAINER/Information)
  var8=$(sed -n '8p' /srv/containers/$NOMECONTAINER/Information)
  var9=$(sed -n '9p' /srv/containers/$NOMECONTAINER/Information)
  var10=$(sed -n '10p' /srv/containers/$NOMECONTAINER/Information)

  VALUE1=$var1; VALUE2=$var2; VALUE3=$var3; VALUE4=$var4; VALUE5=$var5
  VALUE6=$var6; VALUE7=$var7; VALUE8=$var8; VALUE9=$var9; VALUE10=$var10
}

function burn_var {
  export_all

  mkdir -p /srv/containers/"$NOMECONTAINER"/config
  chmod 777 -R /srv/containers/"$NOMECONTAINER"

  touch /srv/containers/"$NOMECONTAINER"/Information

  echo "$var1" > /srv/containers/"$NOMECONTAINER"/Information
  echo "$var2" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var3" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var4" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var5" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var6" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var7" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var8" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var9" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var10" >> /srv/containers/"$NOMECONTAINER"/Information
}

function error {
  dialog --title "ERRO" --msgbox "Não deixe nenhum campo vazio!" 8 40
  menu
}

function docker_stop_rm {
  [ $(docker stop "$NOMECONTAINER") ] && {
    docker rm "$NOMECONTAINER"
  } || {
    echo "O container não existia. Continuando..."
  }
}

function bkp_and_rm_data {
  datetime=$(date +"%d-%m %H-%M")
  echo "Fazendo backup de $NOMECONTAINER:"
  mkdir -p /srv/containers/.backupcnt
  zip "/srv/containers/.backupcnt/$NOMECONTAINER-$datetime.zip" -r /srv/containers/$NOMECONTAINER
  echo "Removendo a pasta de dados de $NOMECONTAINER:"
  rm -iR /srv/containers/"$NOMECONTAINER"
}

function checkA {
  [ "$EUID" -ne 0 ] && {
    echo "Execute esse script como Root! Saindo..."
    exit
    }
}

function checkB {
  export_all

  [ -f "/srv/containers/$NOMECONTAINER/Information" ] && {
    dialog --title "$NOMECONTAINER já existente!" --yesno "Deseja refazê-lo?" 6 40
    [ $? = 0 ] && {
      dialog --title "Recriando o container:" --yesno "Deseja reaproveitar os DADOS da instalação anterior?" 6 40
      [ $? = 0 ] && {
        var_read
        docker_stop_rm
        create
      } || {
        dialog --title "Recriando o container:" --yesno "Fazer backup e remover a pasta /srv/containers/$NOMECONTAINER?" 6 40
        [ $? = 0 ] && {
          docker_stop_rm
          bkp_and_rm_data
          menu
        } || {
          dialog --title "Recriando o container:" --yesno "Fazer REMOVER a pasta /srv/containers/$NOMECONTAINER?" 6 40
          [ $? = 0 ] && {
            docker_stop_rm
            echo "Removendo o diretório /srv/containers/$NOMECONTAINER"
            rm -R /srv/containers/"$NOMECONTAINER"
            menu
          } || {
            docker_stop_rm
            create
          }
        }
      }
    } || {
      echo "A instalação local será mantida! Saindo..."
      exit
    }
  } || {
    menu
  }

}

function menu {
  export_all

  [ -f "/srv/containers/$NOMECONTAINER/Information" ] && {
    custom_values
    var_read
  } || {
    custom_values
    }

  custom_names

  NOMECONTAINER=$var1

  VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 17 40 0 \
"$CustmN1: " 1 1 "$VALUE1" 1 11 30 0 \
"$CustmN2: " 2 1 "$VALUE2" 2 11 30 0 \
"$CustmN3: " 3 1 "$VALUE3" 3 11 30 0 \
"$CustmN4: " 4 1 "$VALUE4" 4 11 30 0 \
"$CustmN5: " 5 1 "$VALUE5" 5 11 30 0 \
"$CustmN5: " 6 1 "$VALUE6" 6 11 30 0 \
"$CustmN5: " 7 1 "$VALUE7" 7 11 30 0 \
"$CustmN5: " 8 1 "$VALUE8" 8 11 30 0 \
"$CustmN5: " 9 1 "$VALUE9" 9 11 30 0 \
"$CustmN5: " 10 1 "$VALUE10" 10 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

  [ $? -ne 0 ] && exit
  var1=$(echo "$VALUE0" | sed -n 1p)
  var2=$(echo "$VALUE0" | sed -n 2p)
  var3=$(echo "$VALUE0" | sed -n 3p)
  var4=$(echo "$VALUE0" | sed -n 4p)
  var5=$(echo "$VALUE0" | sed -n 5p)
  var6=$(echo "$VALUE0" | sed -n 6p)
  var7=$(echo "$VALUE0" | sed -n 7p)
  var8=$(echo "$VALUE0" | sed -n 8p)
  var9=$(echo "$VALUE0" | sed -n 9p)
  var10=$(echo "$VALUE0" | sed -n 10p)

  [ $var_cont -eq "1" ] && {
    [ -z "$var1" ] || {
      error
    } || {
      checkC
      }
    }

  [ $var_cont -eq "2" ] && {
    [ -z "$var1" ] || [ -z "$var2" ] && {
      error
    } || {
      checkC
      }
    }

  [ $var_cont -eq "3" ] && {
    [ -z "$var1" ] || [ -z "$var2" ] || [ -z "$var3" ] && {
      error
    } || {
      checkC
      }
    }

  [ $var_cont -eq "4" ] && {
    [ -z "$var1" ] || [ -z "$var2" ] || [ -z "$var3" ] || [ -z "$var4" ] && {
      error
    } || {
      checkC
      }
    }

  [ $var_cont -eq "5" ] && {
    [ -z "$var1" ] || [ -z "$var2" ] || [ -z "$var3" ] || [ -z "$var4" ] || [ -z "$var5" ] && {
      error
    } || {
      checkC
      }
    }

  [ $var_cont -eq "6" ] && {
    [ -z "$var1" ] || [ -z "$var2" ] || [ -z "$var3" ] || [ -z "$var4" ] || [ -z "$var5" ] || [ -z "$var6" ] && {
      error
    } || {
      checkC
      }
    }

  [ $var_cont -eq "7" ] && {
    [ -z "$var1" ] || [ -z "$var2" ] || [ -z "$var3" ] || [ -z "$var4" ] || [ -z "$var5" ] || [ -z "$var6" ] || [ -z "$var7" ] && {
      error
    } || {
      checkC
      }
    }

  [ $var_cont -eq "8" ] && {
    [ -z "$var1" ] || [ -z "$var2" ] || [ -z "$var3" ] || [ -z "$var4" ] || [ -z "$var5" ] || [ -z "$var6" ] || [ -z "$var7" ] || [ -z "$var8" ] && {
      error
    } || {
      checkC
      }
    }

  [ $var_cont -eq "9" ] && {
    [ -z "$var1" ] || [ -z "$var2" ] || [ -z "$var3" ] || [ -z "$var4" ] || [ -z "$var5" ] || [ -z "$var6" ] || [ -z "$var7" ] || [ -z "$var8" ] || [ -z "$var9" ] && {
      error
    } || {
      checkC
      }
    }

  [ $var_cont -eq "10" ] && {
    [ -z "$var1" ] || [ -z "$var2" ] || [ -z "$var3" ] || [ -z "$var4" ] || [ -z "$var5" ] || [ -z "$var6" ] || [ -z "$var7" ] || [ -z "$var8" ] || [ -z "$var9" ] || [ -z "$var10" ] && {
      error
    } || {
      checkC
      }
    }

}

function checkC {
  #IPMachine=$(hostname -I | awk '{print $1}')
  MyIP=$(cat /srv/containers/scripts/myip)
  [ "$MyIP" = "$var1" ] && {
    dialog --title "ERRO" --msgbox "Conflito de IP detectado! \nMude para outro IP." 6 40
    menu
  } || {
    create
    }
}

function create {
  export_all
  burn_var
  docker_custom
  docker_extras
}

# Start
checkA
checkB

unset var1
unset var2
unset var3
unset var4
unset var5
unset var6
unset var7
unset var8
unset var9
unset var10

exit 1
