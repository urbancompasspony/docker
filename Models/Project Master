#!/bin/bash

# =============================================================================
# #############################################################################
# =============================================================================

export NOMECONTAINER="A-CONT-NAME-A"

var_cont="1"

function custom_names {
$CustmN1=""
$CustmN2=""
$CustmN3=""
$CustmN4=""
$CustmN5=""
}

function custom_values {
VALUE1=""
VALUE2=""
VALUE3=""
VALUE4=""
VALUE5=""
}

docker_repo="urbancompasspony/docker-container:latest"

function docker_custom {

docker run -d \
--name=$NOMECONTAINER \
--network macvlan \
--ip=$var1 \
--dns=1.1.1.1  \
--dns=127.0.0.1 \
--hostname=$NOMECONTAINER \
--no-healthcheck \
-v /etc/localtime:/etc/localtime:ro \
-v /srv/containers/"$NOMECONTAINER"/:/
--restart=unless-stopped \
$docker_repo

}

function docker_extras {
# IF NEEDED:
#docker exec "$NOMECONTAINER" bash -c "echo 'LOCAL_IPV4=0.0.0.0' >> /etc/pihole/pihole-FTL.conf"
#docker restart "$NOMECONTAINER"
}

# =============================================================================
# #############################################################################
# =============================================================================

function export_all {
  [ var_cont = 1 ] && {
    export var1
  }
  [ var_cont = 2 ] && {
    export var1
    export var2
  }
  [ var_cont = 3 ] && {
    export var1
    export var2
    export var3
  }
  [ var_cont = 4 ] && {
    export var1
    export var2
    export var3
    export var4
  }
  [ var_cont = 5 ] && {
    export var1
    export var2
    export var3
    export var4
    export var5
  }
}

export_all

function var_read {
  [ var_cont = 1 ] && {
    var1=$(sed -n '1p' /srv/containers/$NOMECONTAINER/Information)
    VALUE1=$var1
  }

  [ var_cont = 2 ] && {
    var1=$(sed -n '1p' /srv/containers/$NOMECONTAINER/Information)
    var2=$(sed -n '2p' /srv/containers/$NOMECONTAINER/Information)
    VALUE1=$var1; VALUE2=$var2
  }

  [ var_cont = 3 ] && {
    var1=$(sed -n '1p' /srv/containers/$NOMECONTAINER/Information)
    var2=$(sed -n '2p' /srv/containers/$NOMECONTAINER/Information)
    var3=$(sed -n '3p' /srv/containers/$NOMECONTAINER/Information)
    VALUE1=$var1; VALUE2=$var2; VALUE3=$var3
  }

  [ var_cont = 4 ] && {
    var1=$(sed -n '1p' /srv/containers/$NOMECONTAINER/Information)
    var2=$(sed -n '2p' /srv/containers/$NOMECONTAINER/Information)
    var3=$(sed -n '3p' /srv/containers/$NOMECONTAINER/Information)
    var4=$(sed -n '4p' /srv/containers/$NOMECONTAINER/Information)
    VALUE1=$var1; VALUE2=$var2; VALUE3=$var3; VALUE4=$var4
  }

  [ var_cont = 5 ] && {
    var1=$(sed -n '1p' /srv/containers/$NOMECONTAINER/Information)
    var2=$(sed -n '2p' /srv/containers/$NOMECONTAINER/Information)
    var3=$(sed -n '3p' /srv/containers/$NOMECONTAINER/Information)
    var4=$(sed -n '4p' /srv/containers/$NOMECONTAINER/Information)
    var5=$(sed -n '5p' /srv/containers/$NOMECONTAINER/Information)
    VALUE1=$var1; VALUE2=$var2; VALUE3=$var3; VALUE4=$var4; VALUE5=$var5
  }
}

function burn_var {
  [ var_cont = 1 ] && {
    echo "$var1" > /srv/containers/"$NOMECONTAINER"/Information
  }

  [ var_cont = 2 ] && {
    echo "$var1" > /srv/containers/"$NOMECONTAINER"/Information
    echo "$var2" > /srv/containers/"$NOMECONTAINER"/Information
  }

  [ var_cont = 3 ] && {
    echo "$var1" > /srv/containers/"$NOMECONTAINER"/Information
    echo "$var2" > /srv/containers/"$NOMECONTAINER"/Information
    echo "$var3" > /srv/containers/"$NOMECONTAINER"/Information
  }

  [ var_cont = 4 ] && {

    echo "$var1" > /srv/containers/"$NOMECONTAINER"/Information
    echo "$var2" > /srv/containers/"$NOMECONTAINER"/Information
    echo "$var3" > /srv/containers/"$NOMECONTAINER"/Information
    echo "$var4" > /srv/containers/"$NOMECONTAINER"/Information
  }

  [ var_cont = 5 ] && {
    echo "$var1" > /srv/containers/"$NOMECONTAINER"/Information
    echo "$var2" > /srv/containers/"$NOMECONTAINER"/Information
    echo "$var3" > /srv/containers/"$NOMECONTAINER"/Information
    echo "$var4" > /srv/containers/"$NOMECONTAINER"/Information
    echo "$var5" > /srv/containers/"$NOMECONTAINER"/Information
  }
}

function checkA {
  [ "$EUID" -ne 0 ] && {
    echo "Execute esse script como Root!"
    exit
    }
}

function checkB {
  export_all

  [ -f "/srv/containers/$NOMECONTAINER/Information" ] && {
    dialog --title "Dados de $NOMECONTAINER encontrados!" --yesno "Deseja refazer o container?" 6 40
    [ $? = 0 ] && {
    dialog --title "Recriando o container $NOMECONTAINER" --yesno "Deseja reaproveitar os DADOS da instalação anterior?" 6 40
      [ $? = 0 ] && {
          var_read

        [ $(docker stop "$NOMECONTAINER") ] && {
          docker rm "$NOMECONTAINER"

          create
        } || {
          create
        }
        
      } || {
        docker stop "$NOMECONTAINER"
        docker rm "$NOMECONTAINER"
        
        datetime=$(date +"%d-%m %H-%M")
        mkdir -p /srv/containers/.backupcnt
        zip "/srv/containers/.backupcnt/$NOMECONTAINER-$datetime.zip" -r /srv/containers/$NOMECONTAINER
        
        rm -iR /srv/containers/"$NOMECONTAINER"

        menu
        }
    } || {
      echo "A instalação local será mantida! Saindo..."
      exit
    }
  } || {
    menu
    }
}

function menu {
  export_all

  [ -f "/srv/containers/$NOMECONTAINER/Information" ] && {
    var_read
  } || {
    custom_values
  }

  custom_names

  VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 10 40 0 \
"$CustmN1: " 1 1 "$VALUE1" 1 10 20 0 \
"$CustmN2: " 2 1 "$VALUE1" 2 10 20 0 \
"$CustmN3: " 3 1 "$VALUE1" 3 10 20 0 \
"$CustmN4: " 4 1 "$VALUE1" 4 10 20 0 \
"$CustmN5: " 5 1 "$VALUE1" 5 10 20 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

  [ $? -ne 0 ] && exit
  var1=$(echo "$VALUE0" | sed -n 1p)
  var2=$(echo "$VALUE0" | sed -n 2p)
  var3=$(echo "$VALUE0" | sed -n 3p)
  var4=$(echo "$VALUE0" | sed -n 4p)
  var5=$(echo "$VALUE0" | sed -n 5p)

  [ -z "$var1" ] || [ -z "$var2" ] || [ -z "$var3" ] || [ -z "$var4" ] || [ -z "$var5" ] && {
    dialog --title "ERRO" --msgbox "Não deixe nenhum campo vazio!" 8 40
    menu
  } || {
    checkC
    }
}

function checkC {
  #IPMachine=$(hostname -I | awk '{print $1}')
  MyIP=$(cat /srv/containers/scripts/myip)
  [ "$MyIP" = "$var1" ] && {
    dialog --title "ERRO" --msgbox "Conflito de IP detectado! \nMude para outro IP." 6 40
    menu
  } || {
    create
  }
}

function create {
  export_all
  
  mkdir -p /srv/containers/"$NOMECONTAINER"
  touch /srv/containers/"$NOMECONTAINER"/Information

  burn_var

  docker_custom

  docker_extras
}

function clean {
  unset var1
  unset var2
  unset var3
  unset var4
  unset var5
}

# Start
checkA
checkB
clean

exit 1
