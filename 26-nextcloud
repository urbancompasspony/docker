#!/bin/bash

# Nextcloud Version!
# Check var4!
version=28

#############################################################################################################

# Some notes:

# DOES NOT PUT ANY PORTS ON -p FLAG FOR THIS CONTAINER!
# IF YOU DO SO, WILL CONFLICT WITH MYSQL CONTAINER THROUGH BRIDGE NETWORK.

# Do it too after migrating:

# Change /data permissions set as root user: sudo -i
# chown www-data:www-data -R /mnt/data

# find /mnt/data -type f -print0 | xargs -0 chmod 0640
# find /mnt/data -type d -print0 | xargs -0 chmod 0750

# Inside Container:

# docker exec -it nextcloud bash
# php occ maintenance:theme:update ((???))

# SET MAINTENANCE OFF!

# docker exec -u www-data -it nextcloud bash
# php occ files:scan --all

# Outside container:

# Set this on Cron's Host:
# */5 * * * * docker exec -t -u www-data nextcloud php -f /var/www/html/cron.php
# Will run cron.php when needed.

# Last but not least: NEVER use it through bridge if want to access some AD!

# The End!

#############################################################################################################

# Global config for replication:
export NOMECONTAINER="nextcloud"

# IP FIXO DO NOVO CONTAINER
export var1; export var2; export var3

function checkA {
  [ "$EUID" -ne 0 ] && {
    echo "Execute esse script como Root!"
    exit
    }
}

function checkB {
  export var1; export var2; export var3

  [ -f "/srv/containers/$NOMECONTAINER/Information" ] && {
    dialog --title "Dados de $NOMECONTAINER encontrados!" --yesno "Deseja refazer o container?" 6 40
    [ $? = 0 ] && {
    dialog --title "Recriando o container $NOMECONTAINER" --yesno "Deseja reaproveitar os DADOS da instalação anterior?" 6 40
      [ $? = 0 ] && {
        var1=$(sed -n '1p' /srv/containers/$NOMECONTAINER/Information)
        var2=$(sed -n '2p' /srv/containers/$NOMECONTAINER/Information)
        var3=$(sed -n '3p' /srv/containers/$NOMECONTAINER/Information)
        var4=$(sed -n '4p' /srv/containers/$NOMECONTAINER/Information)

        [ $(docker stop "$NOMECONTAINER") ] && {
          docker rm "$NOMECONTAINER"
          create
        } || {
          create
        }

      } || {
        docker stop "$NOMECONTAINER"
        docker rm "$NOMECONTAINER"

        datetime=$(date +"%d-%m %H-%M")
        mkdir -p /srv/containers/.backupcnt
        zip "/srv/containers/.backupcnt/$NOMECONTAINER-$datetime.zip" -r /srv/containers/$NOMECONTAINER

        rm -iR /srv/containers/"$NOMECONTAINER"

        menu
        }
    } || {
      echo "A instalação local será mantida! Saindo..."
      exit
    }
  } || {
    menu
    }
}

function menu {
  export var1; export var2; export var3

  VALUE1=""; VALUE2="/srv/containers/$NOMECONTAINER"; VALUE3="cloud.my-website.com"; VALUE4="$version"

  VALUE0=$(dialog --ok-label "Criar" --title "Container: $NOMECONTAINER" --form "Campo NxtData: VAR/data autopreenchido! \nDefina 1 diretório abaixo e sem /." 13 40 0 \
"Local IP:" 1 1 "$VALUE1" 1 10 20 0 \
"Nxt Data:" 2 1 "$VALUE2" 2 10 40 0 \
"URL WAN :" 3 1 "$VALUE3" 3 10 50 0 \
"Version :" 4 1 "$VALUE4" 4 10 50 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

  [ $? -ne 0 ] && exit
  var1=$(echo "$VALUE0" | sed -n 1p)
  var2=$(echo "$VALUE0" | sed -n 2p)
  var3=$(echo "$VALUE0" | sed -n 3p)
  var4=$(echo "$VALUE0" | sed -n 4p)

  [ -z "$var1" ] || [ -z "$var2" ] || [ -z "$var3" ]  || [ -z "$var4" ] && {
    dialog --title "ERRO" --msgbox "Não deixe nenhum campo vazio!" 8 40
    menu
  } || {
    checkC
    }
}

function checkC {
  #IPMachine=$(hostname -I | awk '{print $1}')
  MyIP=$(cat /srv/containers/scripts/myip)
  [ "$MyIP" = "$var1" ] && {
    dialog --title "ERRO" --msgbox "Conflito de IP detectado! \nMude para outro IP." 6 40
    menu
  } || {
    create
  }
}

function create {
  export var1; export var2; export var3; export var4

  [ -z "$var1" ] || [ -z "$var2" ] || [ -z "$var3" ]  || [ -z "$var4" ] && {
    dialog --title "ERRO" --msgbox "Erro no arquivo Information!" 8 40
    exit
  } || {
    echo "Continuando..."
    }

  mkdir -p /srv/containers/"$NOMECONTAINER"/php
  touch /srv/containers/"$NOMECONTAINER"/php/opcache-recommed.ini

echo -e "opcache.enable=1
opcache.interned_strings_buffer=32
opcache.max_accelerated_files=10000
opcache.memory_consumption=360
opcache.save_comments=1
opcache.revalidate_freq=60" > /srv/containers/"$NOMECONTAINER"/php/opcache-recommed.ini

  mkdir -p "$var2"

  touch /srv/containers/"$NOMECONTAINER"/Information
  echo "$var1" > /srv/containers/"$NOMECONTAINER"/Information
  echo "$var2" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var3" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var4" >> /srv/containers/"$NOMECONTAINER"/Information

docker pull nextcloud:"$var4"

docker run -d \
--name=$NOMECONTAINER \
--network macvlan \
--ip=$var1 \
--dns=1.1.1.1  \
--dns=127.0.0.1 \
--hostname=nextcloud \
--restart=unless-stopped \
--no-healthcheck \
-p 389:389 \
-p 636:636 \
-p 80:80 \
-p 443:443 \
-e VIRTUAL_PROTO=https \
-e VIRTUAL_PORT=443 \
-e VIRTUAL_HOST="$var3" \
-v /etc/localtime:/etc/localtime:ro \
-v /srv/containers/"$NOMECONTAINER"/config:/var/www/html/config \
-v /srv/containers/"$NOMECONTAINER"/php/opcache-recommed.ini:/usr/local/etc/php/conf.d/opcache-recommended.ini \
-v "$var2"/data:/var/www/html/data \
nextcloud:"$var4"
}

function clean {
  unset var1
  unset var2
  unset var3
}

# Start
checkA
checkB

# AutoSet Crontab:
sudo crontab -l > /tmp/crontab
echo "# Nextcloud Maintenance" | tee -a /tmp/crontab
echo "*/5 * * * * docker exec -t -u www-data nextcloud php -f /var/www/html/cron.php" | tee -a /tmp/crontab
sudo crontab /tmp/crontab

clean

exit 1
