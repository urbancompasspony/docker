#!/bin/bash

YAML_FILE="/srv/containers.yaml"

function tools {
  if ! var0=$(dialog --title "" --backtitle "" --menu " " 0 0 0 \
  1 'Set MACVLAN' \
  2 'Remove MACVLAN' \
  3 'PiHole Maintenance' \
  4 'PiHole Install Error' \
  5 'Reset Syncthing Password' \
  6 'Compare Docker PS and YAML' \
  7 'NC: filelocks' \
  8 'NC: add-missing-indices' \
  9 'NC: check-core & mimetype' \
  10 'NC: Disable LDAP' \
  11 'NC: Upgrade Manually CLI' \
  12 'NC: Scan App Data' \
  13 'NC: Scan User Data' \
  14 'NC: Update htaccess' \
  15 'Remove All Useless Images' \
  16 'Elevate Functional Level AD' \
  X '<' 2>&1 > /dev/tty ); then
    return
  fi
  
  case "$var0" in
  1) clear ; curl -sSL https://raw.githubusercontent.com/urbancompasspony/docker/refs/heads/main/Scripts/macvlan/set | sudo bash ; tools ;;
  2) clear ; curl -sSL https://raw.githubusercontent.com/urbancompasspony/docker/refs/heads/main/Scripts/macvlan/remove | sudo bash ; tools ;;
  3) clear ; piholemnt ; tools ;;
  4) clear ; piholeinst ; tools ;;
  5) clear ; syncpass0 ; tools ;;
  6) clear ; comparedocker ; tools ;;
  7) clear ; filelocks ; tools ;;
  8) clear ; missingindices ; tools ;;
  9) clear ; checkcore ; tools ;;
  10) clear ; disableldap ; tools ;;
  11) clear ; upgradenc ; tools ;;
  12) clear ; scanapp0 ; tools ;;
  13) clear ; scanuser0 ; tools ;;
  14) clear ; updateht0 ; tools ;;
  15) clear ; docker image prune -af ; sleep 2 ; tools ;;
  16) clear ; functional0 ; tools ;;
  X) return ;;
  esac
}

function comparedocker {
# Verifica se o arquivo YAML existe
if [[ ! -f "$YAML_FILE" ]]; then
    echo "‚ùå Arquivo $YAML_FILE n√£o encontrado!"
    exit 1
fi

# Verifica se yq est√° instalado
if ! command -v yq &> /dev/null; then
    echo "‚ùå yq n√£o est√° instalado!"
    exit 1
fi

echo "üîç Comparando containers do Docker with $YAML_FILE..."
echo "=================================================="

# Obter lista de containers do Docker (apenas nomes)
echo "üì¶ Containers no Docker:"
docker_containers=$(docker ps -a --format "{{.Names}}" | sort)
echo "$docker_containers"
echo

# Obter lista de nome_custom do YAML
echo "üìÑ Containers no YAML (nome_custom):"
yaml_containers=$(yq eval 'keys | .[]' "$YAML_FILE" 2>/dev/null | while read -r key; do
    yq eval ".\"$key\".nome_custom" "$YAML_FILE" 2>/dev/null
done | sort | grep -v "null")
echo "$yaml_containers"
echo

# Containers que est√£o no Docker mas N√ÉO est√£o no YAML
echo "‚ö†Ô∏è  Containers no Docker que N√ÉO est√£o no YAML:"
comm -23 <(echo "$docker_containers") <(echo "$yaml_containers") | while read -r container; do
    if [[ -n "$container" ]]; then
        echo "  - $container"
    fi
done
echo

# Containers que est√£o no YAML mas N√ÉO est√£o no Docker
echo "üìã Containers no YAML que N√ÉO est√£o no Docker:"
comm -13 <(echo "$docker_containers") <(echo "$yaml_containers") | while read -r container; do
    if [[ -n "$container" ]]; then
        echo "  - $container"
    fi
done
echo

# Containers que coincidem
echo "‚úÖ Containers que coincidem:"
comm -12 <(echo "$docker_containers") <(echo "$yaml_containers") | while read -r container; do
    if [[ -n "$container" ]]; then
        echo "  - $container"
    fi
done
echo

# Resumo
docker_count=$(echo "$docker_containers" | grep -c '^.')
yaml_count=$(echo "$yaml_containers" | grep -c '^.')
matching_count=$(comm -12 <(echo "$docker_containers") <(echo "$yaml_containers") | grep -c '^.')

echo "üìä RESUMO:"
echo "  Containers no Docker: $docker_count"
echo "  Containers no YAML: $yaml_count"
echo "  Correspond√™ncias: $matching_count"

if [[ $matching_count -eq $docker_count ]] && [[ $matching_count -eq $yaml_count ]]; then
    echo "  Status: ‚úÖ Todos os containers coincidem!"
else
    echo "  Status: ‚ö†Ô∏è  H√° diferen√ßas entre as listas"
fi
}

function updateht0 {
  clear
  docker exec -u www-data nextcloud php /var/www/html/occ maintenance:update:htaccess
  sleep 5
}

function functional0 {
  echo WIP
  sleep 1
  #samba-tool domain schemaupgrade --schema=2019
  #samba-tool domain functionalprep --function-level=2016
  #samba-tool domain level raise --domain-level=2016 --forest-level=2016
}

function scanapp0 {
  # Verifica se o arquivo YAML existe
  if [[ ! -f "$YAML_FILE" ]]; then
    echo "Erro: Arquivo YAML n√£o encontrado: $YAML_FILE"
    return 1
  fi
  
  # Busca por entradas que contenham "nextcloud" no nome (para container nextcloud, n√£o MySQL)
  NEXTCLOUD_CONTAINERS=()
  
  while IFS= read -r line; do
    # Procura por linhas que terminam com ":" e cont√™m "nextcloud"
    if [[ "$line" =~ ^[[:space:]]*([^:]+):[[:space:]]*$ ]]; then
      container_name="${BASH_REMATCH[1]}"
      if [[ "$container_name" =~ nextcloud ]]; then
        # Verifica se √© um container NextCloud (n√£o MySQL) lendo as pr√≥ximas linhas
        img_base=""
        nome_custom=""
        
        # L√™ as pr√≥ximas linhas para encontrar img_base e nome_custom
        while IFS= read -r next_line; do
          # Para quando encontrar outro container (nova linha terminando com :)
          if [[ "$next_line" =~ ^[[:space:]]*[^:]+:[[:space:]]*$ ]] && [[ ! "$next_line" =~ ^[[:space:]]*[[:space:]] ]]; then
            break
          fi
          
          if [[ "$next_line" =~ ^[[:space:]]*img_base:[[:space:]]*(.+)$ ]]; then
            img_base="${BASH_REMATCH[1]}"
          elif [[ "$next_line" =~ ^[[:space:]]*nome_custom:[[:space:]]*(.+)$ ]]; then
            nome_custom="${BASH_REMATCH[1]}"
          fi
        done < <(tail -n +$(($(grep -n "^[[:space:]]*${container_name}:" "$YAML_FILE" | cut -d: -f1) + 1)) "$YAML_FILE")
        
        # Se encontrou um container nextcloud que N√ÉO √© MySQL, adiciona √† lista
        if [[ "$img_base" != "mysql" ]] && [[ -n "$nome_custom" ]]; then
          NEXTCLOUD_CONTAINERS+=("$nome_custom")
        fi
      fi
    fi
  done < "$YAML_FILE"
  
  # Verifica se encontrou algum container
  if [[ ${#NEXTCLOUD_CONTAINERS[@]} -eq 0 ]]; then
    echo "Nenhum container NextCloud (aplica√ß√£o) encontrado no arquivo YAML."
    return 1
  fi
  
  # Se encontrou apenas um, usa diretamente
  if [[ ${#NEXTCLOUD_CONTAINERS[@]} -eq 1 ]]; then
    SELECTED_CONTAINER="${NEXTCLOUD_CONTAINERS[0]}"
  else
    # Se encontrou m√∫ltiplos, permite sele√ß√£o
    echo "M√∫ltiplos containers NextCloud encontrados:"
    for i in "${!NEXTCLOUD_CONTAINERS[@]}"; do
      echo "$((i+1)). ${NEXTCLOUD_CONTAINERS[$i]}"
    done
    
    read -p "Selecione o container (1-${#NEXTCLOUD_CONTAINERS[@]}): " selection
    
    if [[ "$selection" =~ ^[0-9]+$ ]] && [[ "$selection" -ge 1 ]] && [[ "$selection" -le ${#NEXTCLOUD_CONTAINERS[@]} ]]; then
      SELECTED_CONTAINER="${NEXTCLOUD_CONTAINERS[$((selection-1))]}"
    else
      echo "Sele√ß√£o inv√°lida."
      return 1
    fi
  fi
  
  # Pr√©-preenche o valor encontrado
  VALUE1="$SELECTED_CONTAINER"
  
  # Mostra dialog para confirma√ß√£o/edi√ß√£o
  if ! VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "Nextcloud" 9 35 0 \
  "NextCont:" 1 1 "$VALUE1" 1 11 30 0 \
  3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    return
  fi
  
  # Extrai o valor do dialog
  var1=$(echo "$VALUE0" | sed -n 1p)
  
  clear; echo "Scanning app data..."
  docker exec -u 33 "$var1" ./occ files:scan-app-data
  sleep 3
}

function scanuser0 {  
  # Verifica se o arquivo YAML existe
  if [[ ! -f "$YAML_FILE" ]]; then
    echo "Erro: Arquivo YAML n√£o encontrado: $YAML_FILE"
    return 1
  fi
  
  # Busca por entradas que contenham "nextcloud" no nome (para container nextcloud, n√£o MySQL)
  NEXTCLOUD_CONTAINERS=()
  
  while IFS= read -r line; do
    # Procura por linhas que terminam com ":" e cont√™m "nextcloud"
    if [[ "$line" =~ ^[[:space:]]*([^:]+):[[:space:]]*$ ]]; then
      container_name="${BASH_REMATCH[1]}"
      if [[ "$container_name" =~ nextcloud ]]; then
        # Verifica se √© um container NextCloud (n√£o MySQL) lendo as pr√≥ximas linhas
        img_base=""
        nome_custom=""
        
        # L√™ as pr√≥ximas linhas para encontrar img_base e nome_custom
        while IFS= read -r next_line; do
          # Para quando encontrar outro container (nova linha terminando com :)
          if [[ "$next_line" =~ ^[[:space:]]*[^:]+:[[:space:]]*$ ]] && [[ ! "$next_line" =~ ^[[:space:]]*[[:space:]] ]]; then
            break
          fi
          
          if [[ "$next_line" =~ ^[[:space:]]*img_base:[[:space:]]*(.+)$ ]]; then
            img_base="${BASH_REMATCH[1]}"
          elif [[ "$next_line" =~ ^[[:space:]]*nome_custom:[[:space:]]*(.+)$ ]]; then
            nome_custom="${BASH_REMATCH[1]}"
          fi
        done < <(tail -n +$(($(grep -n "^[[:space:]]*${container_name}:" "$YAML_FILE" | cut -d: -f1) + 1)) "$YAML_FILE")
        
        # Se encontrou um container nextcloud que N√ÉO √© MySQL, adiciona √† lista
        if [[ "$img_base" != "mysql" ]] && [[ -n "$nome_custom" ]]; then
          NEXTCLOUD_CONTAINERS+=("$nome_custom")
        fi
      fi
    fi
  done < "$YAML_FILE"
  
  # Verifica se encontrou algum container
  if [[ ${#NEXTCLOUD_CONTAINERS[@]} -eq 0 ]]; then
    echo "Nenhum container NextCloud (aplica√ß√£o) encontrado no arquivo YAML."
    return 1
  fi
  
  # Se encontrou apenas um, usa diretamente
  if [[ ${#NEXTCLOUD_CONTAINERS[@]} -eq 1 ]]; then
    SELECTED_CONTAINER="${NEXTCLOUD_CONTAINERS[0]}"
  else
    # Se encontrou m√∫ltiplos, permite sele√ß√£o
    echo "M√∫ltiplos containers NextCloud encontrados:"
    for i in "${!NEXTCLOUD_CONTAINERS[@]}"; do
      echo "$((i+1)). ${NEXTCLOUD_CONTAINERS[$i]}"
    done
    
    read -p "Selecione o container (1-${#NEXTCLOUD_CONTAINERS[@]}): " selection
    
    if [[ "$selection" =~ ^[0-9]+$ ]] && [[ "$selection" -ge 1 ]] && [[ "$selection" -le ${#NEXTCLOUD_CONTAINERS[@]} ]]; then
      SELECTED_CONTAINER="${NEXTCLOUD_CONTAINERS[$((selection-1))]}"
    else
      echo "Sele√ß√£o inv√°lida."
      return 1
    fi
  fi
  
  # Pr√©-preenche o valor encontrado
  VALUE1="$SELECTED_CONTAINER"
  
  # Mostra dialog para confirma√ß√£o/edi√ß√£o
  if ! VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "Nextcloud" 9 35 0 \
  "NextCont:" 1 1 "$VALUE1" 1 11 30 0 \
  3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    return
  fi
  
  # Extrai o valor do dialog
  var1=$(echo "$VALUE0" | sed -n 1p)
  
  clear; echo "Scanning all user files..."
  docker exec -u 33 "$var1" ./occ files:scan --all
  sleep 3
}

function syncpass0 { 
  # Verifica se o arquivo YAML existe
  if [[ ! -f "$YAML_FILE" ]]; then
    echo "Erro: Arquivo YAML n√£o encontrado: $YAML_FILE"
    return 1
  fi
  
  # Busca por entradas que contenham "syncthing" no nome
  SYNCTHING_CONTAINERS=()
  
  while IFS= read -r line; do
    # Procura por linhas que terminam com ":" e cont√™m "syncthing"
    if [[ "$line" =~ ^[[:space:]]*([^:]+):[[:space:]]*$ ]]; then
      container_name="${BASH_REMATCH[1]}"
      if [[ "$container_name" =~ syncthing ]]; then
        # Verifica se √© um container Syncthing lendo as pr√≥ximas linhas
        img_base=""
        nome_custom=""
        
        # L√™ as pr√≥ximas linhas para encontrar img_base e nome_custom
        while IFS= read -r next_line; do
          # Para quando encontrar outro container (nova linha terminando com :)
          if [[ "$next_line" =~ ^[[:space:]]*[^:]+:[[:space:]]*$ ]] && [[ ! "$next_line" =~ ^[[:space:]]*[[:space:]] ]]; then
            break
          fi
          
          if [[ "$next_line" =~ ^[[:space:]]*img_base:[[:space:]]*(.+)$ ]]; then
            img_base="${BASH_REMATCH[1]}"
          elif [[ "$next_line" =~ ^[[:space:]]*nome_custom:[[:space:]]*(.+)$ ]]; then
            nome_custom="${BASH_REMATCH[1]}"
          fi
        done < <(tail -n +$(($(grep -n "^[[:space:]]*${container_name}:" "$YAML_FILE" | cut -d: -f1) + 1)) "$YAML_FILE")
        
        # Se encontrou um container syncthing, adiciona √† lista
        if [[ -n "$nome_custom" ]]; then
          SYNCTHING_CONTAINERS+=("$nome_custom")
        fi
      fi
    fi
  done < "$YAML_FILE"
  
  # Verifica se encontrou algum container
  if [[ ${#SYNCTHING_CONTAINERS[@]} -eq 0 ]]; then
    echo "Nenhum container Syncthing encontrado no arquivo YAML."
    return 1
  fi
  
  # Se encontrou apenas um, usa diretamente
  if [[ ${#SYNCTHING_CONTAINERS[@]} -eq 1 ]]; then
    SELECTED_CONTAINER="${SYNCTHING_CONTAINERS[0]}"
  else
    # Se encontrou m√∫ltiplos, permite sele√ß√£o
    echo "M√∫ltiplos containers Syncthing encontrados:"
    for i in "${!SYNCTHING_CONTAINERS[@]}"; do
      echo "$((i+1)). ${SYNCTHING_CONTAINERS[$i]}"
    done
    
    read -p "Selecione o container (1-${#SYNCTHING_CONTAINERS[@]}): " selection
    
    if [[ "$selection" =~ ^[0-9]+$ ]] && [[ "$selection" -ge 1 ]] && [[ "$selection" -le ${#SYNCTHING_CONTAINERS[@]} ]]; then
      SELECTED_CONTAINER="${SYNCTHING_CONTAINERS[$((selection-1))]}"
    else
      echo "Sele√ß√£o inv√°lida."
      return 1
    fi
  fi
  
  # Pr√©-preenche o valor encontrado
  VALUE1="$SELECTED_CONTAINER"
  
  # Mostra dialog para confirma√ß√£o/edi√ß√£o
  if ! VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "Syncthing" 8 35 0 \
  "NomeCont:" 1 1 "$VALUE1" 1 11 30 0 \
  3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    return
  fi
  
  # Extrai o valor do dialog
  var1=$(echo "$VALUE0" | sed -n 1p)
  
  clear
  docker exec -it "$var1" syncthing generate --gui-password=admin --gui-user=admin
  echo ""; echo "Usuario e senha da WebGUI foram modificados para admin/admin!"
}

function upgradenc { 
  # Verifica se o arquivo YAML existe
  if [[ ! -f "$YAML_FILE" ]]; then
    echo "Erro: Arquivo YAML n√£o encontrado: $YAML_FILE"
    return 1
  fi
  
  # Busca por entradas que contenham "nextcloud" no nome (para container nextcloud, n√£o MySQL)
  NEXTCLOUD_CONTAINERS=()
  
  while IFS= read -r line; do
    # Procura por linhas que terminam com ":" e cont√™m "nextcloud"
    if [[ "$line" =~ ^[[:space:]]*([^:]+):[[:space:]]*$ ]]; then
      container_name="${BASH_REMATCH[1]}"
      if [[ "$container_name" =~ nextcloud ]]; then
        # Verifica se √© um container NextCloud (n√£o MySQL) lendo as pr√≥ximas linhas
        img_base=""
        nome_custom=""
        
        # L√™ as pr√≥ximas linhas para encontrar img_base e nome_custom
        while IFS= read -r next_line; do
          # Para quando encontrar outro container (nova linha terminando com :)
          if [[ "$next_line" =~ ^[[:space:]]*[^:]+:[[:space:]]*$ ]] && [[ ! "$next_line" =~ ^[[:space:]]*[[:space:]] ]]; then
            break
          fi
          
          if [[ "$next_line" =~ ^[[:space:]]*img_base:[[:space:]]*(.+)$ ]]; then
            img_base="${BASH_REMATCH[1]}"
          elif [[ "$next_line" =~ ^[[:space:]]*nome_custom:[[:space:]]*(.+)$ ]]; then
            nome_custom="${BASH_REMATCH[1]}"
          fi
        done < <(tail -n +$(($(grep -n "^[[:space:]]*${container_name}:" "$YAML_FILE" | cut -d: -f1) + 1)) "$YAML_FILE")
        
        # Se encontrou um container nextcloud que N√ÉO √© MySQL, adiciona √† lista
        if [[ "$img_base" != "mysql" ]] && [[ -n "$nome_custom" ]]; then
          NEXTCLOUD_CONTAINERS+=("$nome_custom")
        fi
      fi
    fi
  done < "$YAML_FILE"
  
  # Verifica se encontrou algum container
  if [[ ${#NEXTCLOUD_CONTAINERS[@]} -eq 0 ]]; then
    echo "Nenhum container NextCloud (aplica√ß√£o) encontrado no arquivo YAML."
    return 1
  fi
  
  # Se encontrou apenas um, usa diretamente
  if [[ ${#NEXTCLOUD_CONTAINERS[@]} -eq 1 ]]; then
    SELECTED_CONTAINER="${NEXTCLOUD_CONTAINERS[0]}"
  else
    # Se encontrou m√∫ltiplos, permite sele√ß√£o
    echo "M√∫ltiplos containers NextCloud encontrados:"
    for i in "${!NEXTCLOUD_CONTAINERS[@]}"; do
      echo "$((i+1)). ${NEXTCLOUD_CONTAINERS[$i]}"
    done
    
    read -p "Selecione o container (1-${#NEXTCLOUD_CONTAINERS[@]}): " selection
    
    if [[ "$selection" =~ ^[0-9]+$ ]] && [[ "$selection" -ge 1 ]] && [[ "$selection" -le ${#NEXTCLOUD_CONTAINERS[@]} ]]; then
      SELECTED_CONTAINER="${NEXTCLOUD_CONTAINERS[$((selection-1))]}"
    else
      echo "Sele√ß√£o inv√°lida."
      return 1
    fi
  fi
  
  # Pr√©-preenche o valor encontrado
  VALUE1="$SELECTED_CONTAINER"
  
  # Mostra dialog para confirma√ß√£o/edi√ß√£o
  if ! VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "Nextcloud" 9 35 0 \
  "NextCont:" 1 1 "$VALUE1" 1 11 30 0 \
  3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    return
  fi
  
  # Extrai o valor do dialog
  var1=$(echo "$VALUE0" | sed -n 1p)
  
  clear
  echo "Upgrading..."
  docker exec -u 33 "$var1" ./occ upgrade
  sleep 3
}

function disableldap { 
  # Verifica se o arquivo YAML existe
  if [[ ! -f "$YAML_FILE" ]]; then
    echo "Erro: Arquivo YAML n√£o encontrado: $YAML_FILE"
    return 1
  fi
  
  # Busca por entradas que contenham "nextcloud" no nome (para container nextcloud, n√£o MySQL)
  NEXTCLOUD_CONTAINERS=()
  
  while IFS= read -r line; do
    # Procura por linhas que terminam com ":" e cont√™m "nextcloud"
    if [[ "$line" =~ ^[[:space:]]*([^:]+):[[:space:]]*$ ]]; then
      container_name="${BASH_REMATCH[1]}"
      if [[ "$container_name" =~ nextcloud ]]; then
        # Verifica se √© um container NextCloud (n√£o MySQL) lendo as pr√≥ximas linhas
        img_base=""
        nome_custom=""
        
        # L√™ as pr√≥ximas linhas para encontrar img_base e nome_custom
        while IFS= read -r next_line; do
          # Para quando encontrar outro container (nova linha terminando com :)
          if [[ "$next_line" =~ ^[[:space:]]*[^:]+:[[:space:]]*$ ]] && [[ ! "$next_line" =~ ^[[:space:]]*[[:space:]] ]]; then
            break
          fi
          
          if [[ "$next_line" =~ ^[[:space:]]*img_base:[[:space:]]*(.+)$ ]]; then
            img_base="${BASH_REMATCH[1]}"
          elif [[ "$next_line" =~ ^[[:space:]]*nome_custom:[[:space:]]*(.+)$ ]]; then
            nome_custom="${BASH_REMATCH[1]}"
          fi
        done < <(tail -n +$(($(grep -n "^[[:space:]]*${container_name}:" "$YAML_FILE" | cut -d: -f1) + 1)) "$YAML_FILE")
        
        # Se encontrou um container nextcloud que N√ÉO √© MySQL, adiciona √† lista
        if [[ "$img_base" != "mysql" ]] && [[ -n "$nome_custom" ]]; then
          NEXTCLOUD_CONTAINERS+=("$nome_custom")
        fi
      fi
    fi
  done < "$YAML_FILE"
  
  # Verifica se encontrou algum container
  if [[ ${#NEXTCLOUD_CONTAINERS[@]} -eq 0 ]]; then
    echo "Nenhum container NextCloud (aplica√ß√£o) encontrado no arquivo YAML."
    return 1
  fi
  
  # Se encontrou apenas um, usa diretamente
  if [[ ${#NEXTCLOUD_CONTAINERS[@]} -eq 1 ]]; then
    SELECTED_CONTAINER="${NEXTCLOUD_CONTAINERS[0]}"
  else
    # Se encontrou m√∫ltiplos, permite sele√ß√£o
    echo "M√∫ltiplos containers NextCloud encontrados:"
    for i in "${!NEXTCLOUD_CONTAINERS[@]}"; do
      echo "$((i+1)). ${NEXTCLOUD_CONTAINERS[$i]}"
    done
    
    read -p "Selecione o container (1-${#NEXTCLOUD_CONTAINERS[@]}): " selection
    
    if [[ "$selection" =~ ^[0-9]+$ ]] && [[ "$selection" -ge 1 ]] && [[ "$selection" -le ${#NEXTCLOUD_CONTAINERS[@]} ]]; then
      SELECTED_CONTAINER="${NEXTCLOUD_CONTAINERS[$((selection-1))]}"
    else
      echo "Sele√ß√£o inv√°lida."
      return 1
    fi
  fi
  
  # Pr√©-preenche o valor encontrado
  VALUE1="$SELECTED_CONTAINER"
  
  # Mostra dialog para confirma√ß√£o/edi√ß√£o
  if ! VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "Disable LDAP" 9 35 0 \
  "NextCont:" 1 1 "$VALUE1" 1 11 30 0 \
  3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    return
  fi
  
  # Extrai o valor do dialog
  var1=$(echo "$VALUE0" | sed -n 1p)
  
  clear
  echo "Disabling LDAP Backend!"
  docker exec -u 33 "$var1" ./occ ldap:set-config "s01" "ldapConfigurationActive" "0"
  sleep 2
  docker restart "$var1"
  sleep 3
}

function checkcore { 
  # Verifica se o arquivo YAML existe
  if [[ ! -f "$YAML_FILE" ]]; then
    echo "Erro: Arquivo YAML n√£o encontrado: $YAML_FILE"
    return 1
  fi
  
  # Busca por entradas que contenham "nextcloud" no nome (para container nextcloud, n√£o MySQL)
  NEXTCLOUD_CONTAINERS=()
  
  while IFS= read -r line; do
    # Procura por linhas que terminam com ":" e cont√™m "nextcloud"
    if [[ "$line" =~ ^[[:space:]]*([^:]+):[[:space:]]*$ ]]; then
      container_name="${BASH_REMATCH[1]}"
      if [[ "$container_name" =~ nextcloud ]]; then
        # Verifica se √© um container NextCloud (n√£o MySQL) lendo as pr√≥ximas linhas
        img_base=""
        nome_custom=""
        
        # L√™ as pr√≥ximas linhas para encontrar img_base e nome_custom
        while IFS= read -r next_line; do
          # Para quando encontrar outro container (nova linha terminando com :)
          if [[ "$next_line" =~ ^[[:space:]]*[^:]+:[[:space:]]*$ ]] && [[ ! "$next_line" =~ ^[[:space:]]*[[:space:]] ]]; then
            break
          fi
          
          if [[ "$next_line" =~ ^[[:space:]]*img_base:[[:space:]]*(.+)$ ]]; then
            img_base="${BASH_REMATCH[1]}"
          elif [[ "$next_line" =~ ^[[:space:]]*nome_custom:[[:space:]]*(.+)$ ]]; then
            nome_custom="${BASH_REMATCH[1]}"
          fi
        done < <(tail -n +$(($(grep -n "^[[:space:]]*${container_name}:" "$YAML_FILE" | cut -d: -f1) + 1)) "$YAML_FILE")
        
        # Se encontrou um container nextcloud que N√ÉO √© MySQL, adiciona √† lista
        if [[ "$img_base" != "mysql" ]] && [[ -n "$nome_custom" ]]; then
          NEXTCLOUD_CONTAINERS+=("$nome_custom")
        fi
      fi
    fi
  done < "$YAML_FILE"
  
  # Verifica se encontrou algum container
  if [[ ${#NEXTCLOUD_CONTAINERS[@]} -eq 0 ]]; then
    echo "Nenhum container NextCloud (aplica√ß√£o) encontrado no arquivo YAML."
    return 1
  fi
  
  # Se encontrou apenas um, usa diretamente
  if [[ ${#NEXTCLOUD_CONTAINERS[@]} -eq 1 ]]; then
    SELECTED_CONTAINER="${NEXTCLOUD_CONTAINERS[0]}"
  else
    # Se encontrou m√∫ltiplos, permite sele√ß√£o
    echo "M√∫ltiplos containers NextCloud encontrados:"
    for i in "${!NEXTCLOUD_CONTAINERS[@]}"; do
      echo "$((i+1)). ${NEXTCLOUD_CONTAINERS[$i]}"
    done
    
    read -p "Selecione o container (1-${#NEXTCLOUD_CONTAINERS[@]}): " selection
    
    if [[ "$selection" =~ ^[0-9]+$ ]] && [[ "$selection" -ge 1 ]] && [[ "$selection" -le ${#NEXTCLOUD_CONTAINERS[@]} ]]; then
      SELECTED_CONTAINER="${NEXTCLOUD_CONTAINERS[$((selection-1))]}"
    else
      echo "Sele√ß√£o inv√°lida."
      return 1
    fi
  fi
  
  # Pr√©-preenche o valor encontrado
  VALUE1="$SELECTED_CONTAINER"
  
  # Mostra dialog para confirma√ß√£o/edi√ß√£o
  if ! VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "Nextcloud" 9 35 0 \
  "NextCont:" 1 1 "$VALUE1" 1 11 30 0 \
  3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    return
  fi
  
  # Extrai o valor do dialog
  var1=$(echo "$VALUE0" | sed -n 1p)
  
  clear; echo "Checking core integrity..."
  docker exec -u 33 "$var1" ./occ integrity:check-core
  docker exec -u 33 "$var1" ./occ maintenance:mimetype:update-js
  docker exec -u 33 "$var1" ./occ integrity:check-core
  docker exec -u 33 "$var1" ./occ maintenance:mimetype:update-js
  sleep 3
}

function missingindices {  
  # Verifica se o arquivo YAML existe
  if [[ ! -f "$YAML_FILE" ]]; then
    echo "Erro: Arquivo YAML n√£o encontrado: $YAML_FILE"
    return 1
  fi
  
  # Busca por entradas que contenham "nextcloud" no nome (para container nextcloud, n√£o MySQL)
  NEXTCLOUD_CONTAINERS=()
  
  while IFS= read -r line; do
    # Procura por linhas que terminam com ":" e cont√™m "nextcloud"
    if [[ "$line" =~ ^[[:space:]]*([^:]+):[[:space:]]*$ ]]; then
      container_name="${BASH_REMATCH[1]}"
      if [[ "$container_name" =~ nextcloud ]]; then
        # Verifica se √© um container NextCloud (n√£o MySQL) lendo as pr√≥ximas linhas
        img_base=""
        nome_custom=""
        
        # L√™ as pr√≥ximas linhas para encontrar img_base e nome_custom
        while IFS= read -r next_line; do
          # Para quando encontrar outro container (nova linha terminando com :)
          if [[ "$next_line" =~ ^[[:space:]]*[^:]+:[[:space:]]*$ ]] && [[ ! "$next_line" =~ ^[[:space:]]*[[:space:]] ]]; then
            break
          fi
          
          if [[ "$next_line" =~ ^[[:space:]]*img_base:[[:space:]]*(.+)$ ]]; then
            img_base="${BASH_REMATCH[1]}"
          elif [[ "$next_line" =~ ^[[:space:]]*nome_custom:[[:space:]]*(.+)$ ]]; then
            nome_custom="${BASH_REMATCH[1]}"
          fi
        done < <(tail -n +$(($(grep -n "^[[:space:]]*${container_name}:" "$YAML_FILE" | cut -d: -f1) + 1)) "$YAML_FILE")
        
        # Se encontrou um container nextcloud que N√ÉO √© MySQL, adiciona √† lista
        if [[ "$img_base" != "mysql" ]] && [[ -n "$nome_custom" ]]; then
          NEXTCLOUD_CONTAINERS+=("$nome_custom")
        fi
      fi
    fi
  done < "$YAML_FILE"
  
  # Verifica se encontrou algum container
  if [[ ${#NEXTCLOUD_CONTAINERS[@]} -eq 0 ]]; then
    echo "Nenhum container NextCloud (aplica√ß√£o) encontrado no arquivo YAML."
    return 1
  fi
  
  # Se encontrou apenas um, usa diretamente
  if [[ ${#NEXTCLOUD_CONTAINERS[@]} -eq 1 ]]; then
    SELECTED_CONTAINER="${NEXTCLOUD_CONTAINERS[0]}"
  else
    # Se encontrou m√∫ltiplos, permite sele√ß√£o
    echo "M√∫ltiplos containers NextCloud encontrados:"
    for i in "${!NEXTCLOUD_CONTAINERS[@]}"; do
      echo "$((i+1)). ${NEXTCLOUD_CONTAINERS[$i]}"
    done
    
    read -p "Selecione o container (1-${#NEXTCLOUD_CONTAINERS[@]}): " selection
    
    if [[ "$selection" =~ ^[0-9]+$ ]] && [[ "$selection" -ge 1 ]] && [[ "$selection" -le ${#NEXTCLOUD_CONTAINERS[@]} ]]; then
      SELECTED_CONTAINER="${NEXTCLOUD_CONTAINERS[$((selection-1))]}"
    else
      echo "Sele√ß√£o inv√°lida."
      return 1
    fi
  fi
  
  # Pr√©-preenche o valor encontrado
  VALUE1="$SELECTED_CONTAINER"
  
  # Mostra dialog para confirma√ß√£o/edi√ß√£o
  if ! VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "Nextcloud" 9 35 0 \
  "NextCont:" 1 1 "$VALUE1" 1 11 30 0 \
  3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    return
  fi
  
  # Extrai o valor do dialog
  var1=$(echo "$VALUE0" | sed -n 1p)
  
  clear
  echo "Adding missing indices..."
  docker exec -u 33 "$var1" ./occ db:add-missing-indices
  echo "ok"; sleep 3
  clear
  echo "Fixing mimetypes..."
  docker exec -u 33 "$var1" ./occ maintenance:repair --include-expensive
  echo "ok"; sleep 3
  sleep 3
}

function piholemnt {
  VALUE1="pihole"

  if ! VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "PiHole" 8 35 0 \
  "NomeCont:" 1 1 "$VALUE1" 1 11 30 0 \
  3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    return
  fi

  clear
  var1=$(echo "$VALUE0" | sed -n 1p)
  docker exec "$var1" bash -c "pihole -g -r recover"
  docker exec "$var1" bash -c "rm /etc/pihole/pihole-FTL.db"
  docker restart "$var1"
}

function piholeinst {
  VALUE1="pihole"

  if ! VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "PiHole" 8 35 0 \
  "NomeCont:" 1 1 "$VALUE1" 1 11 30 0 \
  3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    return
  fi

  clear
  var1=$(echo "$VALUE0" | sed -n 1p)
  docker exec "$var1" bash -c "rm /etc/pihole/gravity.db"
  docker exec "$var1" bash -c "pihole -g"
  docker restart "$var1"
}

function filelocks {  
  # Verifica se o arquivo YAML existe
  if [[ ! -f "$YAML_FILE" ]]; then
    echo "Erro: Arquivo YAML n√£o encontrado: $YAML_FILE"
    return 1
  fi
  
  # Busca por entradas que contenham "nextcloud" no nome e tenham img_base: mysql
  NEXTCLOUD_CONTAINERS=()
  
  while IFS= read -r line; do
    # Procura por linhas que terminam com ":" e cont√™m "nextcloud"
    if [[ "$line" =~ ^[[:space:]]*([^:]+):[[:space:]]*$ ]]; then
      container_name="${BASH_REMATCH[1]}"
      if [[ "$container_name" =~ nextcloud ]]; then
        # Verifica se √© um container MySQL lendo as pr√≥ximas linhas
        img_base=""
        mysql_pw=""
        nome_custom=""
        
        # L√™ as pr√≥ximas linhas para encontrar img_base, mysql_pw e nome_custom
        while IFS= read -r next_line; do
          # Para quando encontrar outro container (nova linha terminando com :)
          if [[ "$next_line" =~ ^[[:space:]]*[^:]+:[[:space:]]*$ ]] && [[ ! "$next_line" =~ ^[[:space:]]*[[:space:]] ]]; then
            break
          fi
          
          if [[ "$next_line" =~ ^[[:space:]]*img_base:[[:space:]]*(.+)$ ]]; then
            img_base="${BASH_REMATCH[1]}"
          elif [[ "$next_line" =~ ^[[:space:]]*mysql_pw:[[:space:]]*(.+)$ ]]; then
            mysql_pw="${BASH_REMATCH[1]}"
          elif [[ "$next_line" =~ ^[[:space:]]*nome_custom:[[:space:]]*(.+)$ ]]; then
            nome_custom="${BASH_REMATCH[1]}"
          fi
        done < <(tail -n +$(($(grep -n "^[[:space:]]*${container_name}:" "$YAML_FILE" | cut -d: -f1) + 1)) "$YAML_FILE")
        
        # Se encontrou um container nextcloud com img_base mysql, adiciona √† lista
        if [[ "$img_base" == "mysql" ]] && [[ -n "$mysql_pw" ]] && [[ -n "$nome_custom" ]]; then
          NEXTCLOUD_CONTAINERS+=("$nome_custom|$mysql_pw")
        fi
      fi
    fi
  done < "$YAML_FILE"
  
  # Verifica se encontrou algum container
  if [[ ${#NEXTCLOUD_CONTAINERS[@]} -eq 0 ]]; then
    echo "Nenhum container NextCloud com MySQL encontrado no arquivo YAML."
    return 1
  fi
  
  # Se encontrou apenas um, usa diretamente
  if [[ ${#NEXTCLOUD_CONTAINERS[@]} -eq 1 ]]; then
    IFS='|' read -r SELECTED_CONTAINER SELECTED_PASSWORD <<< "${NEXTCLOUD_CONTAINERS[0]}"
  else
    # Se encontrou m√∫ltiplos, permite sele√ß√£o
    echo "M√∫ltiplos containers NextCloud encontrados:"
    for i in "${!NEXTCLOUD_CONTAINERS[@]}"; do
      IFS='|' read -r container_name password <<< "${NEXTCLOUD_CONTAINERS[$i]}"
      echo "$((i+1)). $container_name"
    done
    
    read -p "Selecione o container (1-${#NEXTCLOUD_CONTAINERS[@]}): " selection
    
    if [[ "$selection" =~ ^[0-9]+$ ]] && [[ "$selection" -ge 1 ]] && [[ "$selection" -le ${#NEXTCLOUD_CONTAINERS[@]} ]]; then
      IFS='|' read -r SELECTED_CONTAINER SELECTED_PASSWORD <<< "${NEXTCLOUD_CONTAINERS[$((selection-1))]}"
    else
      echo "Sele√ß√£o inv√°lida."
      return 1
    fi
  fi
  
  # Pr√©-preenche os valores encontrados
  VALUE1="$SELECTED_CONTAINER"
  VALUE2="$SELECTED_PASSWORD"
  
  # Mostra dialog para confirma√ß√£o/edi√ß√£o
  if ! VALUE0=$(dialog --ok-label "Ok" --title "Manutencao" --form "MySQL - NextCloud" 9 35 0 \
  "mSQLcont:" 1 1 "$VALUE1" 1 11 30 0 \
  "Password:" 2 1 "$VALUE2" 2 11 30 0 \
  3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    return
  fi
  
  # Extrai os valores do dialog
  var1=$(echo "$VALUE0" | sed -n 1p)
  var2=$(echo "$VALUE0" | sed -n 2p)
  
  clear
  echo "File Locks atualmente no Banco de Dados:"
  docker exec "$var1" mysql --user=root -D nextcloud -e 'SELECT * FROM oc_file_locks;'
  sleep 5
  docker exec "$var1" mysql --user=root --password="$var2" -D nextcloud -e 'delete from oc_file_locks where 1'
  sleep 1
  clear
  echo "Conferencia de limpeza de File Locks:"
  docker exec "$var1" mysql --user=root -D nextcloud -e 'SELECT * FROM oc_file_locks;'
  echo "Se nada aparecer aqui, foi limpo com sucesso!"
  sleep 3
}

tools

exit 1
