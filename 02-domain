#!/bin/bash

# Global config for replication:
export NOMECONTAINER="dominio"

# FQDN DA NOVA FLORESTA
export var1
# IP FIXO DO NOVO CONTAINER
export var2
# SENHA DO USUARIO ADMINISTRATOR
export var3
# DEFINA O DNS QUE O DOMINIO USARÁ
export var4
# HOSTNAME DO CONTAINER
export var5
# PLACA DE REDE A SER USADA - Normalmente não muda.
export var6

[ $(arch) = "x86_64" ] && {
  REPOSITORY="urbancompasspony/domain"
} || {
  REPOSITORY="urbancompasspony/domain-arm"
}

function checkA {
  [ "$EUID" -ne 0 ] && {
    echo "Execute esse script como Root!"
    exit
    }
}

function checkB {
  export var1; export var2; export var3; export var4; export var5; export var6

  [ -f "/srv/containers/"$NOMECONTAINER"/Information" ] && {
    dialog --title "Container $NOMECONTAINER já existe!" --yesno "Deseja refazer o container?" 6 40
    [ $? = 0 ] && {
      dialog --title "Recriando o container $NOMECONTAINER" --yesno "Deseja reaproveitar os DADOS da instalação anterior?" 6 40
      [ $? = 0 ] && {
        var1=$(sed -n '1p' /srv/containers/$NOMECONTAINER/Information)
        var2=$(sed -n '2p' /srv/containers/$NOMECONTAINER/Information)
        var3=$(sed -n '3p' /srv/containers/$NOMECONTAINER/Information)
        var4=$(sed -n '4p' /srv/containers/$NOMECONTAINER/Information)
        var5=$(sed -n '5p' /srv/containers/$NOMECONTAINER/Information)
        var6=$(sed -n '6p' /srv/containers/$NOMECONTAINER/Information)

        [ $(docker stop "$NOMECONTAINER") ] && {
          docker rm "$NOMECONTAINER"

          create
        } || {
          create
        }
        
      } || {
        docker stop "$NOMECONTAINER"
        docker rm "$NOMECONTAINER"
        rm -R /srv/containers/"$NOMECONTAINER"

        menu
        }
    } || {
      echo "A instalação local será mantida! Saindo..."
      exit
    }
  } || {
    menu
    }
}

function menu {
  export var1; export var2; export var3; export var4; export var5; export var6

  VALUE1=""; VALUE2=""; VALUE3=""; VALUE4=""; VALUE5="$HOSTNAME"; VALUE6="macvlan"

  VALUE0=$(dialog --ok-label "Criar" --title "Container" --form "Container: $NOMECONTAINER" 15 50 0 \
"F.Q.D.N.: " 1 1 "$VALUE1" 1 10 34 0 \
"Local IP:" 2 1 "$VALUE2" 2 10 34 0 \
"ADM Pass:" 3 1 "$VALUE3" 3 10 34 0 \
"LAN DNS :" 4 1 "$VALUE4" 4 10 34 0 \
"Hostname:" 5 1 "$VALUE5" 5 10 34 0 \
"NetLAN  :" 6 1 "$VALUE6" 6 10 34 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

  [ $? -ne 0 ] && exit

  var1=$(echo "$VALUE0" | sed -n 1p)
  var2=$(echo "$VALUE0" | sed -n 2p)
  var3=$(echo "$VALUE0" | sed -n 3p)
  var4=$(echo "$VALUE0" | sed -n 4p)
  var5=$(echo "$VALUE0" | sed -n 5p)
  var6=$(echo "$VALUE0" | sed -n 6p)
  
  [ -z "$var1" ] || [ -z "$var2" ] || [ -z "$var3" ] || [ -z "$var4" ] || [ -z "$var5" ] || [ -z "$var6" ] && {
    dialog --title "ERRO" --msgbox "Não deixe nenhum campo vazio!" 8 40
    menu
  } || {
    create
    }
}

function create {
  export var1; export var2; export var3; export var4; export var5; export var6
  
  mkdir -p /srv/containers/"$NOMECONTAINER"/log
  
  touch /srv/containers/"$NOMECONTAINER"/Information
  echo "$var1" > /srv/containers/"$NOMECONTAINER"/Information
  echo "$var2" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var3" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var4" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var5" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var6" >> /srv/containers/"$NOMECONTAINER"/Information

  touch /srv/containers/"$NOMECONTAINER"/log/syslog

docker run -d \
--name $NOMECONTAINER \
--dns-search $var1 \
--dns $var2 \
--dns $var4 \
--add-host "$var5"."$var1":"$var2" \
--privileged \
--network $var6 \
--ip=$var2 \
--restart=unless-stopped \
--no-healthcheck \
-h $var5 \
-e "DOMAIN=$var1" \
-e "DOMAINPASS=$var3" \
-e "DNSFORWARDER=$var4" \
-e "HOSTIP=$var2" \
-p $var2:53:53 \
-p $var2:53:53/udp \
-p $var2:88:88 \
-p $var2:88:88/udp \
-p $var2:135:135 \
-p $var2:137:137 \
-p $var2:137:137/udp \
-p $var2:138:138 \
-p $var2:138:138/udp \
-p $var2:139:139 \
-p $var2:389:389 \
-p $var2:389:389/udp \
-p $var2:445:445 \
-p $var2:464:464 \
-p $var2:464:464/udp \
-p $var2:636:636 \
-p $var2:1024-1044:1024-1044 \
-p $var2:3268-3269:3268-3269 \
-v /etc/localtime:/etc/localtime:ro \
-v /srv/containers/"$NOMECONTAINER"/log/syslog:/var/log/syslog \
-v /srv/containers/"$NOMECONTAINER"/data/:/var/lib/samba \
-v /srv/containers/"$NOMECONTAINER"/config/:/etc/samba/external \
-v /mnt:/mnt \
$REPOSITORY
}

function clean {
  unset var1
  unset var2
  unset var3
  unset var4
  unset var5
  unset var6
}

# Start
checkA
checkB
clean

# LOGs
sudo docker exec $NOMECONTAINER chmod 777 -R /var/log/syslog

# ADD MENU DOMINIO!
docker exec $NOMECONTAINER bash -c "apt update"
docker exec $NOMECONTAINER bash -c "apt install curl dialog -y"
docker exec $NOMECONTAINER bash -c "wget https://raw.githubusercontent.com/urbancompasspony/domain/main/domain -O /root/.init"
#docker exec $NOMECONTAINER bash -c "echo '/root/.init' >> /root/.bashrc"
#docker exec $NOMECONTAINER bash -c "chmod +x /root/.init"

docker restart $NOMECONTAINER

exit
