#!/bin/bash

# =============================================================================
# ### C O N T R O L ### P A N E L ########################################### #
# =============================================================================

[ $(arch) = "aarch64" ] && {
  runa="2"
} || {
  runa="4"
}

# Set container name and hostname here.
export NOMECONTAINER="pentest"

# From 1 to 10!
var_cont="8"

# MENU NAMES - 123456789 or ABCDEFGHI
function custom_names {
# Static Name!
CustmN1="Local IP"

CustmN2="? ntfy :"
CustmN3="Hostname"
CustmN4="Parallel"
CustmN5="Repo. PW"
CustmN6="? Web IP"
CustmN7="Web User"
CustmN8="Web Pass"
CustmN9="."
CustmN10="."
}

# MENU DEFAULT VALUES
function custom_values {
# Static Value!
VALUE1="0.0.0.0"

VALUE2="0"
VALUE3="$NOMECONTAINER"
VALUE4="$runa"
VALUE5=""
VALUE6="0.0.0.0"
VALUE7="admin"
VALUE8="P4ssw0rd"
VALUE9="0"
VALUE10="0"
}

# Adjust if needed
function docker_custom {

# Lets stop everything
docker_stop_rm

# Lets Login
docker logout
docker_repo="registry.gitlab.com/docker329/pentest:latest"
username="junior.inventor2@gmail.com"
docker login "$docker_repo" -u="$username" -p="$var5"

# Force get new version!
docker pull $docker_repo

  [ "$var1" = "host" ] || [ "$var1" = "Host" ] || [ "$var1" = "HOST" ] || [ "$var1" = "hostname" ] || [ "$var1" = "localhost" ] && {
  docker run -d \
--name="$NOMECONTAINER" \
--network host \
--hostname="$var3" \
--no-healthcheck \
--restart=unless-stopped \
-v /etc/localtime:/etc/localtime:ro \
-v /srv/containers/"$NOMECONTAINER"/Data:/Data \
-v /srv/containers/"$NOMECONTAINER"/Pentests:/Pentests \
$docker_repo
  } || {
  docker run -d \
--name="$NOMECONTAINER" \
--network macvlan \
--ip="$var1" \
--dns=1.1.1.1  \
--dns=127.0.0.1 \
--hostname="$var3" \
--no-healthcheck \
--restart=unless-stopped \
-v /etc/localtime:/etc/localtime:ro \
-v /srv/containers/"$NOMECONTAINER"/Data:/Data \
-v /srv/containers/"$NOMECONTAINER"/Pentests:/Pentests \
$docker_repo
  }
}

function checkweb {
  [ "$var6" == "0" ] && {
    echo "." > /dev/null
  } || {
    [ "$var6" = "host" ] || [ "$var6" = "Host" ] || [ "$var6" = "HOST" ] || [ "$var6" = "hostname" ] || [ "$var6" = "localhost" ] && {
    docker run -d \
--name=pentapache \
--network host \
--hostname=httpd \
--no-healthcheck \
-v /etc/localtime:/etc/localtime:ro \
-v /srv/containers/"$NOMECONTAINER"/Data:/Data \
-v /srv/containers/"$NOMECONTAINER"/Pentests:/usr/local/apache2/htdocs/ \
--restart=unless-stopped \
httpd:2.4

  docker_extras
    } || {
      docker run -d \
--name=pentapache \
--network macvlan \
--ip=$var6 \
--dns=1.1.1.1  \
--dns=127.0.0.1 \
--hostname=httpd \
--no-healthcheck \
-v /etc/localtime:/etc/localtime:ro \
-v /srv/containers/"$NOMECONTAINER"/Data:/Data \
-v /srv/containers/"$NOMECONTAINER"/Pentests:/usr/local/apache2/htdocs/ \
--restart=unless-stopped \
httpd:2.4

  docker_extras
    }
  }
}


function makedir {
  mkdir -p /srv/containers/"$NOMECONTAINER"/Data
  
  touch /srv/containers/"$NOMECONTAINER"/Data/ntfysh
  touch /srv/containers/"$NOMECONTAINER"/Data/runa
  touch /srv/containers/"$NOMECONTAINER"/Data/hostname

  echo "$var2" > /srv/containers/"$NOMECONTAINER"/Data/ntfysh
  echo "$var3" > /srv/containers/"$NOMECONTAINER"/Data/hostname
  echo "$var4" > /srv/containers/"$NOMECONTAINER"/Data/runa

  touch /srv/containers/"$NOMECONTAINER"/Data/webuser
  touch /srv/containers/"$NOMECONTAINER"/Data/webpass

  echo "$var7" > /srv/containers/"$NOMECONTAINER"/Data/webuser
  echo "$var8" > /srv/containers/"$NOMECONTAINER"/Data/webpass

  touch /srv/containers/"$NOMECONTAINER"/Data/blacklist
  echo "$var6" > /srv/containers/"$NOMECONTAINER"/Data/blacklist

  mkdir /srv/containers/"$NOMECONTAINER"/Pentests
}

# USE IT ONLY IF NEEDED:
function docker_extras {
  docker exec pentapache apt update
  docker exec pentapache apt install nano wget -y
  docker exec pentapache touch .htpasswd
  docker exec pentapache bash -c "wget https://raw.githubusercontent.com/urbancompasspony/docker/main/Apache2/Password/httpd.conf -O /usr/local/apache2/conf/httpd.conf"
  docker exec pentapache bash -c "htpasswd -c -i .htpasswd $var7 < /Data/webpass"
  docker restart pentapache

# =============================================================================
# ########################################################################### #
# =============================================================================

echo "0" > /dev/null
}

function checkA {
  [ "$EUID" -ne 0 ] && {
    echo "Execute esse script como Root! Saindo..."
    exit
    }
}

function export_all {
  export var1; export var2; export var3; export var4; export var5
  export var6; export var7; export var8; export var9; export var10
}

export_all

function var_read {
  var1=$(sed -n '1p' /srv/containers/$NOMECONTAINER/Information)
  var2=$(sed -n '2p' /srv/containers/$NOMECONTAINER/Information)
  var3=$(sed -n '3p' /srv/containers/$NOMECONTAINER/Information)
  var4=$(sed -n '4p' /srv/containers/$NOMECONTAINER/Information)
  var5=$(sed -n '5p' /srv/containers/$NOMECONTAINER/Information)
  var6=$(sed -n '6p' /srv/containers/$NOMECONTAINER/Information)
  var7=$(sed -n '7p' /srv/containers/$NOMECONTAINER/Information)
  var8=$(sed -n '8p' /srv/containers/$NOMECONTAINER/Information)
  var9=$(sed -n '9p' /srv/containers/$NOMECONTAINER/Information)
  var10=$(sed -n '10p' /srv/containers/$NOMECONTAINER/Information)

  VALUE1=$var1; VALUE2=$var2; VALUE3=$var3; VALUE4=$var4; VALUE5=$var5
  VALUE6=$var6; VALUE7=$var7; VALUE8=$var8; VALUE9=$var9; VALUE10=$var10
}

function burn_var {
  export_all

  makedir

  chmod 777 -R /srv/containers/"$NOMECONTAINER"
  touch /srv/containers/"$NOMECONTAINER"/Information

  echo "$var1" > /srv/containers/"$NOMECONTAINER"/Information
  echo "$var2" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var3" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var4" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var5" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var6" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var7" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var8" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var9" >> /srv/containers/"$NOMECONTAINER"/Information
  echo "$var10" >> /srv/containers/"$NOMECONTAINER"/Information
}

function error {
  dialog --title "ERRO" --msgbox "Não deixe nenhum campo vazio!" 8 40
  menu
}

function docker_stop_rm {
  [ $(docker stop pentest) ] && {
    docker rm pentest
  } || {
    echo "O container pentest não existe. Continuando..."
  }
  [ $(docker stop pentapache) ] && {
    docker rm pentapache
  } || {
    echo "O container pentapache não existe. Continuando..."
  }
}

function bkp_and_rm_data {
  datetime=$(date +"%d-%m %H-%M")
  echo "Fazendo backup de $NOMECONTAINER:"
  mkdir -p /srv/containers/.backupcnt
  zip "/srv/containers/.backupcnt/$NOMECONTAINER-$datetime.zip" -r /srv/containers/$NOMECONTAINER
  echo "Removendo a pasta de dados de $NOMECONTAINER:"
  rm -iR /srv/containers/"$NOMECONTAINER"
}

function checkB {
  export_all

  NOMECONTAINER=$var3

  [ -f "/srv/containers/$NOMECONTAINER/Information" ] && {
    dialog --title "$NOMECONTAINER já existente!" --yesno "Deseja refazê-lo?" 6 40
    [ $? = 0 ] && {
      dialog --title "Recriando o container:" --yesno "Deseja reaproveitar os DADOS da instalação anterior?" 6 40
      [ $? = 0 ] && {
        var_read
        docker_stop_rm
        create
      } || {
        dialog --title "Recriando o container:" --yesno "Fazer backup e remover a pasta /srv/containers/$NOMECONTAINER?" 6 40
        [ $? = 0 ] && {
          docker_stop_rm
          bkp_and_rm_data
          menu
        } || {
          dialog --title "Recriando o container:" --yesno "Fazer REMOVER a pasta /srv/containers/$NOMECONTAINER?" 6 40
          [ $? = 0 ] && {
            docker_stop_rm
            echo "Removendo o diretório /srv/containers/$NOMECONTAINER"
            rm -R /srv/containers/"$NOMECONTAINER"
            menu
          } || {
            docker_stop_rm
            create
          }
        }
      }
    } || {
      echo "A instalação local será mantida! Saindo..."
      exit
    }
  } || {
    create
  }

}

function menu {
  export_all

  [ -f "/srv/containers/$NOMECONTAINER/Information" ] && {
    custom_values
    custom_names
    var_read
  } || {
    custom_names
    custom_values
    }

[ $var_cont -le "0" ] && {
  clear
  echo "Incorrect value of var_cont: $var_cont."
  echo "Exiting..."
  exit
}

[ $var_cont -eq "1" ] && {
VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 8 40 0 \
"$CustmN1: " 1 1 "$VALUE1" 1 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && exit
var1=$(echo "$VALUE0" | sed -n 1p)
}

[ $var_cont -eq "2" ] && {
VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 9 40 0 \
"$CustmN1: " 1 1 "$VALUE1" 1 11 30 0 \
"$CustmN2: " 2 1 "$VALUE2" 2 11 70 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && exit
var1=$(echo "$VALUE0" | sed -n 1p)
var2=$(echo "$VALUE0" | sed -n 2p)
}

[ $var_cont -eq "3" ] && {
VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 10 40 0 \
"$CustmN1: " 1 1 "$VALUE1" 1 11 30 0 \
"$CustmN2: " 2 1 "$VALUE2" 2 11 70 0 \
"$CustmN3: " 3 1 "$VALUE3" 3 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && exit
var1=$(echo "$VALUE0" | sed -n 1p)
var2=$(echo "$VALUE0" | sed -n 2p)
var3=$(echo "$VALUE0" | sed -n 3p)
}

[ $var_cont -eq "4" ] && {
VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 11 40 0 \
"$CustmN1: " 1 1 "$VALUE1" 1 11 30 0 \
"$CustmN2: " 2 1 "$VALUE2" 2 11 70 0 \
"$CustmN3: " 3 1 "$VALUE3" 3 11 30 0 \
"$CustmN4: " 4 1 "$VALUE4" 4 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && exit
var1=$(echo "$VALUE0" | sed -n 1p)
var2=$(echo "$VALUE0" | sed -n 2p)
var3=$(echo "$VALUE0" | sed -n 3p)
var4=$(echo "$VALUE0" | sed -n 4p)
}

[ $var_cont -eq "5" ] && {
VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 12 40 0 \
"$CustmN1: " 1 1 "$VALUE1" 1 11 30 0 \
"$CustmN2: " 2 1 "$VALUE2" 2 11 70 0 \
"$CustmN3: " 3 1 "$VALUE3" 3 11 30 0 \
"$CustmN4: " 4 1 "$VALUE4" 4 11 30 0 \
"$CustmN5: " 5 1 "$VALUE5" 5 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && exit
var1=$(echo "$VALUE0" | sed -n 1p)
var2=$(echo "$VALUE0" | sed -n 2p)
var3=$(echo "$VALUE0" | sed -n 3p)
var4=$(echo "$VALUE0" | sed -n 4p)
var5=$(echo "$VALUE0" | sed -n 5p)
}

[ $var_cont -eq "6" ] && {
VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 13 40 0 \
"$CustmN1: " 1 1 "$VALUE1" 1 11 30 0 \
"$CustmN2: " 2 1 "$VALUE2" 2 11 70 0 \
"$CustmN3: " 3 1 "$VALUE3" 3 11 30 0 \
"$CustmN4: " 4 1 "$VALUE4" 4 11 30 0 \
"$CustmN5: " 5 1 "$VALUE5" 5 11 30 0 \
"$CustmN6: " 6 1 "$VALUE6" 6 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && exit
var1=$(echo "$VALUE0" | sed -n 1p)
var2=$(echo "$VALUE0" | sed -n 2p)
var3=$(echo "$VALUE0" | sed -n 3p)
var4=$(echo "$VALUE0" | sed -n 4p)
var5=$(echo "$VALUE0" | sed -n 5p)
var6=$(echo "$VALUE0" | sed -n 6p)
}

[ $var_cont -eq "7" ] && {
VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 14 40 0 \
"$CustmN1: " 1 1 "$VALUE1" 1 11 30 0 \
"$CustmN2: " 2 1 "$VALUE2" 2 11 70 0 \
"$CustmN3: " 3 1 "$VALUE3" 3 11 30 0 \
"$CustmN4: " 4 1 "$VALUE4" 4 11 30 0 \
"$CustmN5: " 5 1 "$VALUE5" 5 11 30 0 \
"$CustmN6: " 6 1 "$VALUE6" 6 11 30 0 \
"$CustmN7: " 7 1 "$VALUE7" 7 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && exit
var1=$(echo "$VALUE0" | sed -n 1p)
var2=$(echo "$VALUE0" | sed -n 2p)
var3=$(echo "$VALUE0" | sed -n 3p)
var4=$(echo "$VALUE0" | sed -n 4p)
var5=$(echo "$VALUE0" | sed -n 5p)
var6=$(echo "$VALUE0" | sed -n 6p)
var7=$(echo "$VALUE0" | sed -n 7p)
}

[ $var_cont -eq "8" ] && {
VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 15 40 0 \
"$CustmN1: " 1 1 "$VALUE1" 1 11 30 0 \
"$CustmN2: " 2 1 "$VALUE2" 2 11 70 0 \
"$CustmN3: " 3 1 "$VALUE3" 3 11 30 0 \
"$CustmN4: " 4 1 "$VALUE4" 4 11 30 0 \
"$CustmN5: " 5 1 "$VALUE5" 5 11 30 0 \
"$CustmN6: " 6 1 "$VALUE6" 6 11 30 0 \
"$CustmN7: " 7 1 "$VALUE7" 7 11 30 0 \
"$CustmN8: " 8 1 "$VALUE8" 8 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && exit
var1=$(echo "$VALUE0" | sed -n 1p)
var2=$(echo "$VALUE0" | sed -n 2p)
var3=$(echo "$VALUE0" | sed -n 3p)
var4=$(echo "$VALUE0" | sed -n 4p)
var5=$(echo "$VALUE0" | sed -n 5p)
var6=$(echo "$VALUE0" | sed -n 6p)
var7=$(echo "$VALUE0" | sed -n 7p)
var8=$(echo "$VALUE0" | sed -n 8p)
}

[ $var_cont -eq "9" ] && {
VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 16 40 0 \
"$CustmN1: " 1 1 "$VALUE1" 1 11 30 0 \
"$CustmN2: " 2 1 "$VALUE2" 2 11 70 0 \
"$CustmN3: " 3 1 "$VALUE3" 3 11 30 0 \
"$CustmN4: " 4 1 "$VALUE4" 4 11 30 0 \
"$CustmN5: " 5 1 "$VALUE5" 5 11 30 0 \
"$CustmN6: " 6 1 "$VALUE6" 6 11 30 0 \
"$CustmN7: " 7 1 "$VALUE7" 7 11 30 0 \
"$CustmN8: " 8 1 "$VALUE8" 8 11 30 0 \
"$CustmN9: " 9 1 "$VALUE9" 9 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && exit
var1=$(echo "$VALUE0" | sed -n 1p)
var2=$(echo "$VALUE0" | sed -n 2p)
var3=$(echo "$VALUE0" | sed -n 3p)
var4=$(echo "$VALUE0" | sed -n 4p)
var5=$(echo "$VALUE0" | sed -n 5p)
var6=$(echo "$VALUE0" | sed -n 6p)
var7=$(echo "$VALUE0" | sed -n 7p)
var8=$(echo "$VALUE0" | sed -n 8p)
var9=$(echo "$VALUE0" | sed -n 9p)
}

[ $var_cont -eq "10" ] && {
VALUE0=$(dialog --ok-label "Criar" --title "Novo Container" --form "Container: $NOMECONTAINER" 17 40 0 \
"$CustmN1: " 1 1 "$VALUE1" 1 11 30 0 \
"$CustmN2: " 2 1 "$VALUE2" 2 11 70 0 \
"$CustmN3: " 3 1 "$VALUE3" 3 11 30 0 \
"$CustmN4: " 4 1 "$VALUE4" 4 11 30 0 \
"$CustmN5: " 5 1 "$VALUE5" 5 11 30 0 \
"$CustmN5: " 6 1 "$VALUE6" 6 11 30 0 \
"$CustmN5: " 7 1 "$VALUE7" 7 11 30 0 \
"$CustmN5: " 8 1 "$VALUE8" 8 11 30 0 \
"$CustmN5: " 9 1 "$VALUE9" 9 11 30 0 \
"$CustmN5: " 10 1 "$VALUE10" 10 11 30 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
[ $? -ne 0 ] && exit
var1=$(echo "$VALUE0" | sed -n 1p)
var2=$(echo "$VALUE0" | sed -n 2p)
var3=$(echo "$VALUE0" | sed -n 3p)
var4=$(echo "$VALUE0" | sed -n 4p)
var5=$(echo "$VALUE0" | sed -n 5p)
var6=$(echo "$VALUE0" | sed -n 6p)
var7=$(echo "$VALUE0" | sed -n 7p)
var8=$(echo "$VALUE0" | sed -n 8p)
var9=$(echo "$VALUE0" | sed -n 9p)
var10=$(echo "$VALUE0" | sed -n 10p)
}

[ $var_cont -ge "11" ] && {
  clear
  echo "Incorrect value of var_cont: $var_cont."
  echo "Exiting..."
  exit
}

checkB

}

function checkC {
  #IPMachine=$(hostname -I | awk '{print $1}')
  MyIP=$(cat /srv/containers/scripts/myip)
  [ "$MyIP" = "$myip" ] && {
    dialog --title "ERRO" --msgbox "Conflito de IP detectado! \nMude para outro IP." 6 40
    menu
  } || {
    create
    }
}

function create {
  export_all
  burn_var
  docker_custom
}

################################################################################

# Will force get new version when login in!

# Cleaning up
[ -d /srv/containers/"$NOMECONTAINER"/Pentests ] && {
  sudo rm -R /srv/containers/"$NOMECONTAINER"/Pentests
  sudo mkdir /srv/containers/"$NOMECONTAINER"/Pentests
} || {
  echo "." > /dev/null
}

checkA
menu
checkweb
docker logout
sudo rm /root/.docker/config.json

################################################################################

#Ending
unset var1
unset var2
unset var3
unset var4
unset var5
unset var6
unset var7
unset var8
unset var9
unset var10

exit 1
