#!/bin/bash

# =============================================================================
# ########################################################################### #
# =============================================================================

export NOMECONTAINER="A-CUSTOM-A"
export docker_repo="CUSTOM/DOCKER:LATEST"
export base_img="pihole etc"

function custom_vars {
# -----------------------------------
  CustmN2="Local IP   "
  CustmN3="DNS Server "
  CustmN4="MountPoints"
  CustmN5="Usuario    "
  CustmN6="Senha      "
  CustmN7="."
  CustmN8="."
  CustmN9="."
  CustmN10="."
# -----------------------------------
  VALUE2="0.0.0.0"
  VALUE3="8.8.4.4"
  VALUE4="-v /mnt:/mnt"
  VALUE5="admin"
  VALUE6="p4ssw0rd"
  VALUE7="0"
  VALUE8="0"
  VALUE9="0"
  VALUE10="0"
# -----------------------------------
}

function docker_create {
  if [[ "$CustmN2" =~ ^(host|Host|HOST|local|Local|LOCAL|hostname|Hostname|HostName|HOSTNAME|localhost|Localhost|LocalHost|LOCALHOST|)$ ]]; then
    docker run -d --name="$NOMECONTAINER" --hostname="$NOMECONTAINER" \
    --network host \
    --no-healthcheck --restart=unless-stopped -v /etc/localtime:/etc/localtime:ro \
    -v "/srv/containers/$NOMECONTAINER/config:/config" \
    -v "/srv/containers/$NOMECONTAINER/data:/data" \
    -v $VALUE4 \
    "$docker_repo"
  else
    docker run -d --name="$NOMECONTAINER" --hostname="$NOMECONTAINER" \
    --network macvlan --ip="$CustmN2" --dns="$CustmN3" \
    --no-healthcheck --restart=unless-stopped -v /etc/localtime:/etc/localtime:ro \
    -v "/srv/containers/$NOMECONTAINER/config:/config" \
    -v "/srv/containers/$NOMECONTAINER/data:/data" \
    -v $VALUE4 \
    "$docker_repo"
  fi

#--privileged
#--network host --add-host=host.docker.internal:host-gateway \
}

# USE IT ONLY IF NEEDED:
function docker_extras {
#docker exec "$NOMECONTAINER" bash -c "echo 'parameter=0' >> /etc/custom.conf"
#docker restart "$NOMECONTAINER"

# =============================================================================
# ########################################################################### #
# =============================================================================
echo "0" > /dev/null
}

masterfile="/srv/system.yaml"
configfile="/srv/containers.yaml"

CustmN1="NomeCont"

labels=("$CustmN1" "$CustmN2" "$CustmN3" "$CustmN4" "$CustmN5" "$CustmN6" "$CustmN7" "$CustmN8" "$CustmN9" "$CustmN10")

VALUE1="$NOMECONTAINER"
values=("$VALUE1" "$VALUE2" "$VALUE3" "$VALUE4" "$VALUE5" "$VALUE6" "$VALUE7" "$VALUE8" "$VALUE9" "$VALUE10")

function check_root {
  [ "$EUID" -ne 0 ] && {
    clear; echo "Execute esse script como Root! Saindo..."
    exit 1
  }
}

function lockfile0 {
  if [ -f /srv/lockfile ]; then
    load_config
    docker_create
    save_config
  else
    return
  fi
}

function check_macvlan {
  if ! docker inspect macvlan 1>/dev/null 2>/dev/null; then
    clear; echo "A macvlan não existe! Saindo..."; sleep 3
    exit 0
  fi
}

function try_pull {
  if ! docker pull "$docker_repo"; then
    clear; echo "Erro: docker pull falhou... saindo."; sleep 3
    exit 1
  fi
}

function cleanup0 {
  docker image prune -af

  for i in {1..10}; do
    unset "VALUE$i"
  done

  for i in {1..10}; do
    unset "CustmN$i"
  done
}

function main_menu {
  load_config

  form_args=()
  for idx in "${!labels[@]}"; do
    line=$((idx+1))
    form_args+=("${labels[$idx]}: " "$line" 1 "${values[$idx]}" "$line" 15 100 0)
  done

  if ! form=$(dialog --ok-label "Criar" --title "Novo Container" --form "Nome sugerido: $NOMECONTAINER" 20 50 0 \
  "${form_args[@]}" 3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    exit
  fi

  mapfile -t VALUES <<< "$form"

  for i in {1..10}; do
    declare "VALUE$i=${VALUES[$((i-1))]}"
  done

  NOMECONTAINER="$CustmN1"

  check_IP
}

function load_config {
  [ -f "$configfile" ] || return

    for i in "${!values[@]}"; do
      eval "VALUE$((i+1))=\"\$(yq -r \".${values[$i]}\" \"$configfile\")\""
    done

    [ "$VALUE1" = "null" ] && return
    NOMECONTAINER="$VALUE1"
}

function check_IP {
  if grep -qw "$VALUE2" "$masterfile"; then
    dialog --title "ERRO" --msgbox "Conflito de IP detectado:\nMesmo IP do Host!" 6 40
    return
  elif grep -qw "$VALUE2" "$configfile"; then
    dialog --title "ERRO" --msgbox "Conflito de IP detectado:\nMesmo IP de outro container!" 6 40
    return
  else
    create
  fi
}

function mkdir0 {
  if [ -d "/srv/containers/$NOMECONTAINER" ]; then
    dialog --title "WARNING" --msgbox "Foram identificados dados previamente configurados! \n\nParando e removendo container caso esteja rodando. \n\nSe precisar, apague o conteudo de /srv/$NOMECONTAINER manualmente" 12 50
    if docker stop "$NOMECONTAINER"; then
      docker rm "$NOMECONTAINER"
    else
      clear; echo "O container $NOMECONTAINER não existe ou não foi identificado. Continuando..."
    fi
  else
    mkdir -p /srv/containers/"$NOMECONTAINER"/{config,data}
  fi
}

function save_config {
  sudo touch "$configfile"
  custom_names=("$CustmN1" "$CustmN2" "$CustmN3" "$CustmN4" "$CustmN5" "$CustmN6" "$CustmN7" "$CustmN8" "$CustmN9" "$CustmN10")
  values=("$VALUE1" "$VALUE2" "$VALUE3" "$VALUE4" "$VALUE5" "$VALUE6" "$VALUE7" "$VALUE8" "$VALUE9" "$VALUE10")

  datetime0=$(date +"%d/%m/%Y - %H:%M")
  sudo yq -i ".${NOMECONTAINER}.install = \"${datetime0}\"" "$configfile"
  sudo yq -i ".${NOMECONTAINER}.baseimg = \"${base_img}\"" "$configfile"

  for i in "${!custom_names[@]}"; do
    sudo yq -i ".${NOMECONTAINER}.${custom_names[$i]} = \"${values[$i]}\"" "$configfile"
  done
}

function create {
  mkdir0
  save_config
  docker_create
  docker_extras
  cleanup0
}

check_root
lockfile0
check_macvlan
try_pull
custom_vars
main_menu

exit 0
